{"version":3,"sources":["ui/ChordFinder/ChordDisplay/ChordDisplayPresenter.ts","ui/ChordFinder/ChordDisplay/ChordDisplayStore.ts","ui/ChordFinder/ChordDisplay/ChordDisplayView.tsx","chords/chords.ts","ui/ChordFinder/Piano/Octave/OctaveStore.tsx","chords/parseFromPiano.ts","chords/parseFromSymbol/parser.ts","chords/parseFromSymbol/parseFromSymbol.ts","ui/ChordFinder/ChordFinderPresenter.ts","ui/ChordFinder/ChordFinderStore.ts","ui/ChordFinder/Piano/Octave/key/Key.tsx","ui/ChordFinder/Piano/Octave/OctavePresenter.tsx","ui/ChordFinder/Piano/Octave/OctaveView.tsx","ui/ChordFinder/Piano/Octave/Octave.tsx","ui/ChordFinder/Piano/PianoPresenter.tsx","ui/ChordFinder/Piano/PianoStore.tsx","ui/ChordFinder/Piano/PianoView.tsx","ui/ChordFinder/Piano/Piano.tsx","ui/ChordFinder/ChordFinder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChordDisplayPresenter","store","this","symbol","runInAction","chordSymbol","set","name","chordName","action","ChordDisplayStore","observable","box","ChordDisplayView","onChangeSymbol","className","onSubmit","e","preventDefault","value","type","onChange","currentTarget","Interval","isKeySharp","note","includes","NOTES","DEFAULT_NOTES_STATE","map","isMarked","OctaveStore","notes","i","filter","computed","replace","ints","remove","replacement","interval","add","newInterval","find","push","sort","MAJOR","UNISON","MAJOR_THIRD","PERFECT_FIFTH","identity","minorThird","MINOR_THIRD","augmentedFifth","MINOR_SIXTH","diminishedFifth","TRITONE","power","removals","sus2","MAJOR_SECOND","sus4","PERFECT_FOURTH","Note","tone","modifier","undefined","Quality","quality","Error","Chord","root","_intervals","join","result","forEach","f","INTERVAL_LISTS_TO_CHORD_FEATURES","qualities","chordsWithDistinctFeatures","q","intervalsToFeatures","chord","intervals","toString","intervalsToChordFeatures","ASTKinds","Parser","input","pos","negating","memoSafe","overallPos","line","offset","length","$$dpth","$$cr","matchchord","choice","matchtone_1","matchtone_2","matchtone_3","matchtone_4","matchtone_5","matchtone_6","matchtone_7","regexAccept","String","raw","run","$scope$tone","$scope$modifier","$$res","matchtone","matchnote_$0","kind","matchnote_$0_1","matchnote_$0_2","matchnote","$scope$diminished","matchdiminished_$0","diminished","matchdiminished_$0_1","matchdiminished_$0_2","$scope$augmented","matchaugmented_$0","augmented","matchaugmented_$0_1","matchaugmented_$0_2","$scope$major","matchmajor_$0","major","matchmajor_$0_1","matchmajor_$0_2","$scope$minor","matchminor_$0","minor","matchminor_$0_1","matchminor_$0_2","$scope$sus2","$scope$sus4","matchsus_1","matchsus_2","matchsus2","matchsus4","$scope$power","matchpower_$0","major2","matchquality_1","matchquality_2","matchquality_3","matchquality_4","matchquality_5","matchquality_6","matchquality_7","matchdiminished","matchaugmented","matchmajor","matchminor","matchsus","matchpower","matchmajor2","$scope$root","$scope$quality","matchroot","matchquality","match$EOF","mrk","mark","ans","matchstart","reset","res","ast","errs","rec","ErrorTracker","clearMemos","err","getErr","func","star","t","fn","fns","match","dpth","cr","reg","RegExp","lastIndex","tryConsume","record","literal","substring","negated","exec","lineJmp","lind","oneg","rule","memo","$scope$pos","$scope$memoRes","get","$scope$result","et","finished","$EOF","SyntaxErr","expmatches","x","mxpos","regexset","Set","pmatches","att","clear","has","evaluateParsedSymbol","_root","_quality","JSON","stringify","evaluateQualityName","parseChordFromSymbol","parse","ChordFinderPresenter","chordFromSymbol","piano","display","updateName","unmarkAll","markedIndexes","markedNotesIndexes","markedIndexesShiftedDown","markedIntervals","indexesToIntervals","rootSymbol","chordFeatures","parseChordFromPiano","updateSymbol","octavesToScaleDown","Math","floor","reduce","previous","current","min","indexes","ChordFinderStore","Key","props","onClick","WhiteKey","BlackKey","GhostKey","sampler","Tone","urls","A0","C1","A1","C2","A2","C3","A3","C4","A4","C5","A5","C6","A6","C7","A7","C8","release","baseUrl","toDestination","OctavePresenter","bind","a","triggerAttack","getAttribute","playSound","indexesToMark","isValidIndex","noteState","console","log","WhiteKeys","children","BlackKeys","OctaveView","PianoPresenter","octaves","scaledIntervals","noteIndex","every","octave","flatMap","n","modifierShift","findIndex","PianoStore","PianoView","createPiano","presenter","Octave","observer","concat","toggleKey","onClickSound","onClickCallBack","createOctave","octaveStores","Piano","ChordFinder","displayStore","displayPresenter","pianoStore","onSymbolInput","ChordDisplay","onClickKey","onPianoInput","createChordFinder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VAGaA,GAAb,aAGE,WAAYC,GAA2B,yBAF/BA,WAE8B,EACpCC,KAAKD,MAAQA,EAJjB,gDAOE,SACoBE,GAAiB,IAAD,OAClCC,aAAY,kBAAM,EAAKH,MAAMI,YAAYC,IAAIH,QATjD,wBAYE,SACkBI,GAAe,IAAD,OAC9BH,aAAY,kBAAM,EAAKH,MAAMO,UAAUF,IAAIC,UAd/C,6CAOGE,KAPH,+GAYGA,KAZH,0E,QCDaC,G,MAAb,uJACGC,KADH,yEACmCA,IAAWC,IAAI,OADlD,yCAEGD,KAFH,yEAEqCA,IAAWC,IAAI,OAFpD,G,eCOO,SAASC,EAAT,GAII,IAHTL,EAGQ,EAHRA,UACAH,EAEQ,EAFRA,YACAS,EACQ,EADRA,eAEA,OACE,yBAASC,UAAU,oBAAnB,SACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,kBAFN,UAKE,8BACE,gCAAQ,WACPV,KAEH,8BACE,gCAAQ,YACR,uBACEW,MAAOd,EACPe,KAAK,OACLb,KAAK,YACLc,SAAU,SAACJ,GAAD,OACRH,EAAeG,EAAEK,cAAcH,kB,gBC9BjCI,E,QCKCC,EAAa,SAACC,GAAD,OAAkBA,EAAKC,SAAS,MAmB7CC,EAAgB,CAC3B,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KAGIC,EAAsBD,EAAME,KAAI,SAACJ,GAAD,MAAW,CAC/CA,KAAMA,EACNK,UAAU,MAGCC,GAAb,yKAKE,WAEE,OAAO7B,KAAK8B,MACTH,KAAI,SAACJ,EAAMQ,GAAP,mBAAC,eAAkBR,GAAnB,IAAyBQ,SAC7BC,QAAO,qBAAGJ,YACVD,KAAI,qBAAGI,SAVd,wCACGtB,KADH,yEAC4CA,YAAWiB,MADvD,6CAGGjB,KAHH,yEAG4C,gBAH5C,yCAKGwB,KALH,6EDjBA,SAASC,EAAQC,EAAkBC,EAAkBC,GACnD,OAAOF,EAAKR,KAAI,SAACW,GAAD,OAAeA,IAAaF,EAASC,EAAcC,KAMrE,SAASC,EAAIJ,EAAkBK,GAC7B,OAAIL,EAAKM,MAAK,SAACV,GAAD,OAAOA,IAAMS,OAG3BL,EAAKO,KAAKF,GACVL,EAAKQ,QAHIR,G,SApCCd,O,mBAAAA,I,+BAAAA,I,+BAAAA,I,6BAAAA,I,6BAAAA,I,mCAAAA,I,qBAAAA,I,iCAAAA,I,6BAAAA,I,6BAAAA,I,2CAAAA,I,kCAAAA,I,kCAAAA,I,oBAAAA,I,8BAAAA,I,8BAAAA,I,8BAAAA,I,8BAAAA,I,wCAAAA,I,wCAAAA,I,sCAAAA,I,wCAAAA,I,yCAAAA,M,KAoDZ,IAAMuB,EAAQ,CAACvB,EAASwB,OAAQxB,EAASyB,YAAazB,EAAS0B,eAIzDC,EAAW,SAACb,GAAD,OAAsBA,GACjCc,EAAa,SAACd,GAAD,OACjBD,EAAQC,EAAMd,EAASyB,YAAazB,EAAS6B,cACzCC,EAAiB,SAAChB,GAAD,OACrBD,EAAQC,EAAMd,EAAS0B,cAAe1B,EAAS+B,cAC3CC,EAAkB,SAAClB,GAAD,OACtBD,EAAQC,EAAMd,EAAS0B,cAAe1B,EAASiC,UAI3CC,EAAQ,SAACpB,GAAD,OApCd,SAAgBA,EAAkBqB,GAChC,OAAOrB,EAAKH,QAAO,SAACD,GAAD,OAAQyB,EAAShC,SAASO,MAoC7CK,CAAOD,EAAM,CAACd,EAASyB,YAAazB,EAAS6B,eACzCO,EAAO,SAACtB,GAAD,OAAsBI,EAAIgB,EAAMpB,GAAOd,EAASqC,eACvDC,EAAO,SAACxB,GAAD,OAAsBI,EAAIgB,EAAMpB,GAAOd,EAASuC,iBA2ChDC,EAAb,WAIE,WAAYC,EAAYC,GAA0B,yBAHlDD,UAGiD,OAFjDC,cAAyBC,EAGvBhE,KAAK8D,KAAOA,EACZ9D,KAAK+D,SAAWA,EANpB,wCASE,WACE,OAAO/D,KAAK+D,SAAW/D,KAAK8D,KAAO9D,KAAK+D,SAAW/D,KAAK8D,SAV5D,KAcaG,EAAb,WACE,WAAqBC,GAAuB,yBAAvBA,UADvB,sCAGE,WACE,OAAOlE,KAAKkE,UAJhB,kBAOE,WACE,OAAQlE,KAAKkE,SACX,IAAK,QACH,MAAO,GACT,IAAK,QACH,MAAO,IACT,IAAK,YACH,MAAO,IACT,IAAK,aACH,MAAO,IAGT,IAAK,QACH,MAAO,IACT,IAAK,gBACH,MAAO,OACT,IAAK,gBACH,MAAO,OACT,QACE,MAAMC,MAAM,2BAAD,OAA4BnE,KAAKkE,aA1BpD,oBA8BE,WACE,OAAQlE,KAAKK,MACX,IAAK,QACH,OAAO2C,EACT,IAAK,QACH,OAAOC,EACT,IAAK,YACH,OAAOE,EACT,IAAK,aACH,OAAOE,EAGT,IAAK,QACH,OAAOE,EACT,IAAK,gBACH,OAAOE,EACT,IAAK,gBACH,OAAOE,EACT,QACE,MAAMQ,MAAM,2BAAD,OAA4BnE,KAAKkE,eAjDpD,KA8DaE,EAAb,WAGE,WAAqBC,EAAqBH,GAAmB,yBAAxCG,OAAuC,KAAlBH,UAAkB,KAFpDI,gBAA0BN,EADpC,sCAKE,WAAY,IACFK,EAAkBrE,KAAlBqE,KAAMH,EAAYlE,KAAZkE,QAEd,MADc,CAACG,EAAKpE,OAAQiE,EAAQ7D,MACvBkE,KAAK,OARtB,kBAWE,WAAc,IACJF,EAAkBrE,KAAlBqE,KAAMH,EAAYlE,KAAZkE,QAEd,MADgB,CAACG,EAAKpE,OAAQiE,EAAQjE,QACvBsE,KAAK,MAdxB,qBAiBE,WACE,IAAKvE,KAAKsE,WAAY,CACpB,IAAIE,EAAS5B,EACiB,CAAC5C,KAAKkE,QAAQH,UAClCU,SAAQ,SAACC,GAAD,OAAQF,EAASE,EAAEF,MACrCxE,KAAKsE,WAAaE,EAEpB,OAAOxE,KAAKsE,eAxBhB,KEpJA,IAAMK,EApBN,SAAkCC,GAChC,IAAMP,EAAO,IAAIR,EAAK,KAChBgB,EAA6BD,EAAUjD,KAC3C,SAACmD,GAAD,OAAO,IAAIV,EAAMC,EAAM,IAAIJ,EAAQa,OAE/BC,EAAkE,GAYxE,OAXAF,EAA2BJ,SACzB,SAACO,GAAD,OAMGD,EAAoBC,EAAMC,UAAUC,YAAc,CACjDhB,QAASc,EAAMd,QAAQA,YAGtBa,EAIPI,CF6C2B,CAC3B,QACA,QACA,YACA,aAEA,QACA,gBACA,kB,yDGtEUC,G,oCAAAA,K,cAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,YAAAA,E,sBAAAA,E,sBAAAA,E,YAAAA,E,wBAAAA,E,kCAAAA,E,kCAAAA,E,sBAAAA,E,gCAAAA,E,gCAAAA,E,cAAAA,E,wBAAAA,E,wBAAAA,E,cAAAA,E,wBAAAA,E,wBAAAA,E,YAAAA,E,YAAAA,E,cAAAA,E,cAAAA,E,cAAAA,E,oBAAAA,E,gBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,sBAAAA,E,cAAAA,E,aAAAA,Q,KAyHL,IAAMC,GAAb,WAKI,WAAYC,GAAgB,yBAJXA,WAIU,OAHnBC,SAGmB,OAFnBC,UAAoB,EAED,KADnBC,UAAoB,EAExBzF,KAAKuF,IAAM,CAACG,WAAY,EAAGC,KAAM,EAAGC,OAAQ,GAC5C5F,KAAKsF,MAAQA,EAPrB,yCASI,SAAaC,GACTvF,KAAKuF,IAAMA,IAVnB,sBAYI,WACI,OAAOvF,KAAKuF,IAAIG,aAAe1F,KAAKsF,MAAMO,SAblD,wBAeI,cAfJ,wBAiBI,SAAkBC,EAAgBC,GAC9B,OAAO/F,KAAKgG,WAAWF,EAAS,EAAGC,KAlB3C,uBAoBI,SAAiBD,EAAgBC,GAAsC,IAAD,OAClE,OAAO/F,KAAKiG,OAAa,CACrB,kBAAM,EAAKC,YAAYJ,EAAS,EAAGC,IACnC,kBAAM,EAAKI,YAAYL,EAAS,EAAGC,IACnC,kBAAM,EAAKK,YAAYN,EAAS,EAAGC,IACnC,kBAAM,EAAKM,YAAYP,EAAS,EAAGC,IACnC,kBAAM,EAAKO,YAAYR,EAAS,EAAGC,IACnC,kBAAM,EAAKQ,YAAYT,EAAS,EAAGC,IACnC,kBAAM,EAAKS,YAAYV,EAAS,EAAGC,QA5B/C,yBA+BI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAhC/D,yBAkCI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAnC/D,yBAqCI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAtC/D,yBAwCI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAzC/D,yBA2CI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KA5C/D,yBA8CI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KA/C/D,yBAiDI,SAAmBD,EAAgBC,GAC/B,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAlD/D,uBAoDI,SAAiBD,EAAgBC,GAAsC,IAAD,OAClE,OAAO/F,KAAK4G,IAAUd,GAClB,WACI,IAAIe,EACAC,EACAC,EAAwB,KAO5B,OAL4D,QAApDF,EAAc,EAAKG,UAAUlB,EAAS,EAAGC,MACxCe,EAAkB,EAAKG,aAAanB,EAAS,EAAGC,GAFrD,KAIAgB,EAAQ,CAACG,KAAM9B,GAAS7D,KAAMuC,KAAM+C,EAAa9C,SAAU+C,IAExDC,OAhEvB,0BAmEI,SAAoBjB,EAAgBC,GAAyC,IAAD,OACxE,OAAO/F,KAAKiG,OAAgB,CACxB,kBAAM,EAAKkB,eAAerB,EAAS,EAAGC,IACtC,kBAAM,EAAKqB,eAAetB,EAAS,EAAGC,QAtElD,4BAyEI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KA1E/D,4BA4EI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KA7E/D,uBA+EI,SAAiBD,EAAgBC,GAC7B,OAAO/F,KAAKqH,UAAUvB,EAAS,EAAGC,KAhF1C,6BAkFI,SAAuBD,EAAgBC,GAA4C,IAAD,OAC9E,OAAO/F,KAAK4G,IAAgBd,GACxB,WACI,IAAIwB,EACAP,EAA8B,KAMlC,OAJ2E,QAAnEO,EAAoB,EAAKC,mBAAmBzB,EAAS,EAAGC,MAE5DgB,EAAQ,CAACG,KAAM9B,GAASoC,WAAYA,WAAYF,IAE7CP,OA5FvB,gCA+FI,SAA0BjB,EAAgBC,GAA+C,IAAD,OACpF,OAAO/F,KAAKiG,OAAsB,CAC9B,kBAAM,EAAKwB,qBAAqB3B,EAAS,EAAGC,IAC5C,kBAAM,EAAK2B,qBAAqB5B,EAAS,EAAGC,QAlGxD,kCAqGI,SAA4BD,EAAgBC,GACxC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,gCAAoCb,EAAS,EAAGC,KAtG/D,kCAwGI,SAA4BD,EAAgBC,GACxC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,oCAAsCb,EAAS,EAAGC,KAzGjE,4BA2GI,SAAsBD,EAAgBC,GAA2C,IAAD,OAC5E,OAAO/F,KAAK4G,IAAed,GACvB,WACI,IAAI6B,EACAZ,EAA6B,KAMjC,OAJyE,QAAjEY,EAAmB,EAAKC,kBAAkB9B,EAAS,EAAGC,MAE1DgB,EAAQ,CAACG,KAAM9B,GAASyC,UAAWA,UAAWF,IAE3CZ,OArHvB,+BAwHI,SAAyBjB,EAAgBC,GAA8C,IAAD,OAClF,OAAO/F,KAAKiG,OAAqB,CAC7B,kBAAM,EAAK6B,oBAAoBhC,EAAS,EAAGC,IAC3C,kBAAM,EAAKgC,oBAAoBjC,EAAS,EAAGC,QA3HvD,iCA8HI,SAA2BD,EAAgBC,GACvC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,8CAAqCb,EAAS,EAAGC,KA/HhE,iCAiII,SAA2BD,EAAgBC,GACvC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,oCAAsCb,EAAS,EAAGC,KAlIjE,wBAoII,SAAkBD,EAAgBC,GAAuC,IAAD,OACpE,OAAO/F,KAAK4G,IAAWd,GACnB,WACI,IAAIkC,EACAjB,EAAyB,KAM7B,OAJiE,QAAzDiB,EAAe,EAAKC,cAAcnC,EAAS,EAAGC,MAElDgB,EAAQ,CAACG,KAAM9B,GAAS8C,MAAOA,MAAOF,IAEnCjB,OA9IvB,2BAiJI,SAAqBjB,EAAgBC,GAA0C,IAAD,OAC1E,OAAO/F,KAAKiG,OAAiB,CACzB,kBAAM,EAAKkC,gBAAgBrC,EAAS,EAAGC,IACvC,kBAAM,EAAKqC,gBAAgBtC,EAAS,EAAGC,QApJnD,6BAuJI,SAAuBD,EAAgBC,GACnC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,oCAAsCb,EAAS,EAAGC,KAxJjE,6BA0JI,SAAuBD,EAAgBC,GACnC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,kCAAoCb,EAAS,EAAGC,KA3J/D,wBA6JI,SAAkBD,EAAgBC,GAAuC,IAAD,OACpE,OAAO/F,KAAK4G,IAAWd,GACnB,WACI,IAAIuC,EACAtB,EAAyB,KAM7B,OAJiE,QAAzDsB,EAAe,EAAKC,cAAcxC,EAAS,EAAGC,MAElDgB,EAAQ,CAACG,KAAM9B,GAASmD,MAAOA,MAAOF,IAEnCtB,OAvKvB,2BA0KI,SAAqBjB,EAAgBC,GAA0C,IAAD,OAC1E,OAAO/F,KAAKiG,OAAiB,CACzB,kBAAM,EAAKuC,gBAAgB1C,EAAS,EAAGC,IACvC,kBAAM,EAAK0C,gBAAgB3C,EAAS,EAAGC,QA7KnD,6BAgLI,SAAuBD,EAAgBC,GACnC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,oCAAsCb,EAAS,EAAGC,KAjLjE,6BAmLI,SAAuBD,EAAgBC,GACnC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,kCAAoCb,EAAS,EAAGC,KApL/D,uBAsLI,SAAiBD,EAAgBC,GAAsC,IAAD,OAClE,OAAO/F,KAAK4G,IAAUd,GAClB,WACI,IAAI4C,EACA3B,EAAwB,KAM5B,OAJoF,QAA5E2B,EAAc,EAAKjC,YAAYC,OAAOC,IAAxB,qCAAuCb,EAAS,EAAGC,MAErEgB,EAAQ,CAACG,KAAM9B,GAAS3B,KAAMA,KAAMiF,IAEjC3B,OAhMvB,uBAmMI,SAAiBjB,EAAgBC,GAAsC,IAAD,OAClE,OAAO/F,KAAK4G,IAAUd,GAClB,WACI,IAAI6C,EACA5B,EAAwB,KAM5B,OAJoF,QAA5E4B,EAAc,EAAKlC,YAAYC,OAAOC,IAAxB,qCAAuCb,EAAS,EAAGC,MAErEgB,EAAQ,CAACG,KAAM9B,GAASzB,KAAMA,KAAMgF,IAEjC5B,OA7MvB,sBAgNI,SAAgBjB,EAAgBC,GAAqC,IAAD,OAChE,OAAO/F,KAAKiG,OAAY,CACpB,kBAAM,EAAK2C,WAAW9C,EAAS,EAAGC,IAClC,kBAAM,EAAK8C,WAAW/C,EAAS,EAAGC,QAnN9C,wBAsNI,SAAkBD,EAAgBC,GAC9B,OAAO/F,KAAK8I,UAAUhD,EAAS,EAAGC,KAvN1C,wBAyNI,SAAkBD,EAAgBC,GAC9B,OAAO/F,KAAK+I,UAAUjD,EAAS,EAAGC,KA1N1C,wBA4NI,SAAkBD,EAAgBC,GAAuC,IAAD,OACpE,OAAO/F,KAAK4G,IAAWd,GACnB,WACI,IAAIkD,EACAjC,EAAyB,KAM7B,OAJiE,QAAzDiC,EAAe,EAAKC,cAAcnD,EAAS,EAAGC,MAElDgB,EAAQ,CAACG,KAAM9B,GAAS7B,MAAOA,MAAOyF,IAEnCjC,OAtOvB,2BAyOI,SAAqBjB,EAAgBC,GACjC,OAAO/F,KAAKyG,YAAYC,OAAOC,IAAxB,kCAAoCb,EAAS,EAAGC,KA1O/D,yBA4OI,SAAmBD,EAAgBC,GAAwC,IAAD,OACtE,OAAO/F,KAAK4G,IAAYd,GACpB,WACI,IAAIkC,EACAjB,EAA0B,KAM9B,OAJiF,QAAzEiB,EAAe,EAAKvB,YAAYC,OAAOC,IAAxB,iCAAmCb,EAAS,EAAGC,MAElEgB,EAAQ,CAACG,KAAM9B,GAAS8D,OAAQhB,MAAOF,IAEpCjB,OAtPvB,0BAyPI,SAAoBjB,EAAgBC,GAAyC,IAAD,OACxE,OAAO/F,KAAKiG,OAAgB,CACxB,kBAAM,EAAKkD,eAAerD,EAAS,EAAGC,IACtC,kBAAM,EAAKqD,eAAetD,EAAS,EAAGC,IACtC,kBAAM,EAAKsD,eAAevD,EAAS,EAAGC,IACtC,kBAAM,EAAKuD,eAAexD,EAAS,EAAGC,IACtC,kBAAM,EAAKwD,eAAezD,EAAS,EAAGC,IACtC,kBAAM,EAAKyD,eAAe1D,EAAS,EAAGC,IACtC,kBAAM,EAAK0D,eAAe3D,EAAS,EAAGC,QAjQlD,4BAoQI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK0J,gBAAgB5D,EAAS,EAAGC,KArQhD,4BAuQI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK2J,eAAe7D,EAAS,EAAGC,KAxQ/C,4BA0QI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK4J,WAAW9D,EAAS,EAAGC,KA3Q3C,4BA6QI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK6J,WAAW/D,EAAS,EAAGC,KA9Q3C,4BAgRI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK8J,SAAShE,EAAS,EAAGC,KAjRzC,4BAmRI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAK+J,WAAWjE,EAAS,EAAGC,KApR3C,4BAsRI,SAAsBD,EAAgBC,GAClC,OAAO/F,KAAKgK,YAAYlE,EAAS,EAAGC,KAvR5C,wBAyRI,SAAkBD,EAAgBC,GAAuC,IAAD,OACpE,OAAO/F,KAAK4G,IAAWd,GACnB,WACI,IAAImE,EACAC,EACAnD,EAAyB,KAQ7B,OAN4D,QAApDkD,EAAc,EAAKE,UAAUrE,EAAS,EAAGC,KACiB,QAA1DmE,EAAiB,EAAKE,aAAatE,EAAS,EAAGC,KACvB,OAAzB,EAAKsE,UAAUtE,KAElBgB,EAAQ,CAACG,KAAM9B,GAASJ,MAAOX,KAAM4F,EAAa/F,QAASgG,IAExDnD,OAtSvB,kBAySI,WACI,IAAMuD,EAAMtK,KAAKuK,OAEXC,EAAc,OADRxK,KAAKyK,WAAW,GAG5B,OADAzK,KAAK0K,MAAMJ,GACJE,IA9Sf,mBAgTI,WACI,IAAMF,EAAMtK,KAAKuK,OACXI,EAAM3K,KAAKyK,WAAW,GAC5B,GAAIE,EACA,MAAO,CAACC,IAAKD,EAAKE,KAAM,IAC5B7K,KAAK0K,MAAMJ,GACX,IAAMQ,EAAM,IAAIC,GAChB/K,KAAKgL,aACLhL,KAAKyK,WAAW,EAAGK,GACnB,IAAMG,EAAMH,EAAII,SAChB,MAAO,CAACN,IAAKD,EAAKE,KAAc,OAARI,EAAe,CAACA,GAAO,MA1TvD,kBA4TI,WACI,OAAOjL,KAAKuF,MA7TpB,kBA+TI,SAAgB4F,GAGZ,IAHwE,IAAvCC,EAAsC,wDACjEd,EAAMtK,KAAKuK,OACXI,EAAW,KACR,CACL,IAAMU,EAAIF,IACV,GAAU,OAANE,EACA,MAEJV,EAAIjI,KAAK2I,GAEb,OAAID,GAAQT,EAAI9E,OAAS,EACd8E,GAEX3K,KAAK0K,MAAMJ,GACJ,QA7Uf,iBA+UI,SAAexE,EAAgBwF,GAC3B,IAAMhB,EAAMtK,KAAKuK,OACXI,EAAMW,IACZ,OAAY,OAARX,EACOA,GACX3K,KAAK0K,MAAMJ,GACJ,QArVf,oBAuVI,SAAkBiB,GAAyC,IAAD,iBACtCA,GADsC,IACtD,2BAAqB,CAAC,IACZZ,GAAMjG,EADK,WAEjB,GAAY,OAARiG,EACA,OAAOA,GAJuC,8BAOtD,OAAO,OA9Vf,yBAgWI,SAAoBa,EAAeC,EAAcC,GAAsC,IAAD,OAClF,OAAO1L,KAAK4G,IAAY6E,GACpB,WACI,IAAME,EAAM,IAAIC,OAAOJ,EAAO,KACxBlB,EAAM,EAAKC,OACjBoB,EAAIE,UAAYvB,EAAI5E,WACpB,IAAMiF,EAAM,EAAKmB,WAAWH,GAU5B,OATGD,GACCA,EAAGK,OAAOzB,EAAKK,EAAK,CAChBzD,KAAM,aAGN8E,QAASR,EAAMS,UAAU,EAAGT,EAAM3F,OAAS,GAC3CqG,QAAS,EAAK1G,WAGfmF,OAhXvB,wBAmXI,SAAmBgB,GACf,IAAMhB,EAAMgB,EAAIQ,KAAKnM,KAAKsF,OAC1B,GAAIqF,EAAK,CAGL,IAFA,IAAIyB,EAAU,EACVC,GAAQ,EACHtK,EAAI,EAAGA,EAAI4I,EAAI,GAAG9E,SAAU9D,EACf,OAAd4I,EAAI,GAAG5I,OACLqK,EACFC,EAAOtK,GAQf,OALA/B,KAAKuF,IAAM,CACPG,WAAYiG,EAAIE,UAChBlG,KAAM3F,KAAKuF,IAAII,KAAOyG,EACtBxG,QAAkB,IAAVyG,EAAcrM,KAAKuF,IAAIK,OAAS+E,EAAI,GAAG9E,OAAU8E,EAAI,GAAG9E,OAASwG,EAAO,GAE7E1B,EAAI,GAEf,OAAO,OArYf,uBAuYI,SAAqBW,GACjB,IAAMhB,EAAMtK,KAAKuK,OACXI,EAAMW,IAEZ,OADAtL,KAAK0K,MAAMJ,GACJK,IA3Yf,oBA6YI,SAAkBW,GACd,IAAMhB,EAAMtK,KAAKuK,OACX+B,EAAOtM,KAAKwF,SAClBxF,KAAKwF,UAAY8G,EACjB,IAAM3B,EAAMW,IAGZ,OAFAtL,KAAKwF,SAAW8G,EAChBtM,KAAK0K,MAAMJ,GACI,OAARK,GAAsB,OApZrC,qBAsZI,SAAmB4B,EAAqBC,GACpC,IAAMC,EAAazM,KAAKuK,OAClBmC,EAAiBF,EAAKG,IAAIF,EAAW/G,YAC3C,GAAG1F,KAAKyF,eAA+BzB,IAAnB0I,EAEpB,OADA1M,KAAK0K,MAAMgC,EAAe,IACnBA,EAAe,GAEtB,IAAME,EAAgBL,IAGtB,OAFGvM,KAAKyF,UACR+G,EAAKpM,IAAIqM,EAAW/G,WAAY,CAACkH,EAAe5M,KAAKuK,SAC9CqC,IAhaf,uBAkaI,SAAkBC,GACd,IAAMlC,EAAoC3K,KAAK8M,WAAa,CAAE5F,KAAM9B,GAAS2H,MAAS,KAGtF,OAFGF,GACCA,EAAGd,OAAO/L,KAAKuK,OAAQI,EAAK,CAAEzD,KAAM,MAAOgF,QAASlM,KAAKwF,WACtDmF,MAtaf,KA6bO,I,GAAMqC,GAAb,WAGI,WAAYzH,EAAc0H,GAA6B,yBAFhD1H,SAE+C,OAD/C0H,gBAC+C,EAClDjN,KAAKuF,IAAMA,EACXvF,KAAKiN,WAAL,aAAsBA,GAL9B,4CAOI,WACI,MAAM,wBAAN,OAA+BjN,KAAKuF,IAAII,KAAxC,YAAgD3F,KAAKuF,IAAIK,OAAzD,6BAAoF5F,KAAKiN,WAAWtL,KAAI,SAAAuL,GAAC,MAAe,QAAXA,EAAEhG,KAAiB,OAAnB,WAAgCgG,EAAEhB,QAAU,OAAQ,GAApD,YAA0DgB,EAAElB,QAA5D,aARrH,KAWMjB,G,iDACMoC,MAAiB,CAACzH,YAAa,EAAGC,MAAO,EAAGC,QAAS,G,KACrDwH,SAAwB,IAAIC,I,KAC5BC,SAA2B,G,0CACnC,SAAc/H,EAAcf,EAAa+I,GACrB,OAAX/I,IAAqB+I,EAAIrB,UAE1B3G,EAAIG,WAAa1F,KAAKmN,MAAMzH,aAC5B1F,KAAKmN,MAAQ5H,EACbvF,KAAKsN,SAAW,GAChBtN,KAAKoN,SAASI,SAEdxN,KAAKmN,MAAMzH,aAAeH,EAAIG,aACd,eAAb6H,EAAIrG,MACClH,KAAKoN,SAASK,IAAIF,EAAIvB,UACtBhM,KAAKsN,SAAS5K,KAAK6K,GACvBvN,KAAKoN,SAAS7K,IAAIgL,EAAIvB,UAEtBhM,KAAKsN,SAAS5K,KAAK6K,O,oBAI/B,WACI,OAA+B,IAA3BvN,KAAKmN,MAAMzH,WACJ,IAAIsH,GAAUhN,KAAKmN,MAAOnN,KAAKsN,UACnC,S,KC/kBR,SAASI,GAAqB1I,GACnC,GAAc,OAAVA,EAAgB,MAAMb,MAAM,yBADqC,IAEvDwJ,EAA6B3I,EAAnCX,KAAsBuJ,EAAa5I,EAAtBd,QACfG,EAAO,IAAIR,EAAK8J,EAAM7J,KAAc6J,EAAM5J,UAC1CG,EAAU,IAAID,EAhBtB,SAA6BC,GAC3B,GAAIA,EAAQgE,OAA2B,KAAlBhE,EAAQgE,MAAc,MAAO,QAClD,GAAIhE,EAAQqE,MAAO,MAAO,QAC1B,GAAIrE,EAAQ2D,UAAW,MAAO,YAC9B,GAAI3D,EAAQsD,WAAY,MAAO,aAE/B,GAAItD,EAAQX,MAAO,MAAO,QAC1B,GAAIW,EAAQT,KAAM,MAAO,gBACzB,GAAIS,EAAQP,KAAM,MAAO,gBACzB,MAAMQ,MAAM,qBAAuB0J,KAAKC,UAAU5J,IAOtB6J,CAAoBH,IAChD,OAAO,IAAIxJ,EAAMC,EAAMH,GAGlB,SAAS8J,GAAqB7N,GAAyC,IACpEyK,ED+gBI,IAAIvF,GC/gBMlF,GDghBX8N,QChhBHrD,IACR,GAAIA,EAAK,OAAO8C,GAAqB9C,GCzChC,IAAMsD,IAAb,cACE,WAAoBnO,GAA0B,yBAA1BA,QADtB,iDAGE,WAEE,IAAMiF,EAAQhF,KAAKmO,gBADL,EAEanO,KAAKD,MAAxBqO,EAFM,EAENA,MAAOC,EAFD,EAECA,QACXrJ,GACFqJ,EAAQC,WAAWtJ,EAAM3E,MACzB+N,EAAMG,YACNH,EAAM7D,KAAKvF,KAEXqJ,EAAQC,WAAW,IACnBF,EAAMG,eAbZ,0BAiBE,WAEE,IAAIC,EAAgBxO,KAAKD,MAAMqO,MAAMK,qBACrC,GAA6B,IAAzBD,EAAc3I,OAAlB,CACA2I,EACEN,EAAqBQ,yBAAyBF,GAChD,IAAMG,EACJT,EAAqBU,mBAAmBJ,GAEpCxJ,EHaK,SACb6J,EACA5J,GAEA,IAAM6J,EAAgBnK,EAAiCM,EAAUC,YACjE,GAAK4J,EAAL,CACA,IAAMzK,EAAO,IAAIR,EACfgL,EAAW,GACXvN,EAAWuN,GAAe,SAAuB7K,GAE7CE,EAAU,IAAID,EAAQ6K,EAAc5K,SAE1C,OADc,IAAIE,EAAMC,EAAMH,IGxBd6K,CADKtN,EAAM+M,EAAc,IACOG,GACtCN,EAAYrO,KAAKD,MAAjBsO,QACJrJ,GACFqJ,EAAQC,WAAWtJ,EAAM3E,MACzBgO,EAAQW,aAAahK,EAAM/E,UAE3BoO,EAAQC,WAAW,IACnBD,EAAQW,aAAa,QAjC3B,2BAgEE,WAIE,OADoBhB,GADAhO,KAAKD,MAAMsO,QAAQtO,MAAMI,YAAYwM,UAlE7D,uCA4CE,SAAwC6B,GAEtC,IAAMS,EACJT,EAAc3I,OAAS,EACnB2I,EACG7M,KAAI,SAACI,GAAD,OAAOmN,KAAKC,MAAMpN,EAAI,OAC1BqN,QAAO,SAACC,EAAUC,GAAX,OAAuBJ,KAAKK,IAAIF,EAAUC,MACpD,EACN,OAAIL,EAAqB,EAChBT,EAAc7M,KAAI,SAACI,GAAD,OAAOA,EAAyB,GAArBkN,KAE/BT,IAvDX,gCA0DE,SAAkCgB,GAChC,GAAwB,KAAb,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAAS3J,QAAc,OAAO2J,EAClC,IAAMnL,EAAOmL,EAAQ,GACrB,OAAOA,EAAQ7N,KAAI,SAACI,GAAD,OAAOA,EAAIsC,SA7DlC,+CAGG9D,KAHH,qHAiBGA,KAjBH,uHAgEG0B,KAhEH,kFCWawN,GACX,WACWrB,EACAC,GACR,yBAFQD,QAET,KADSC,W,cCLb,SAASqB,GAAIC,GAAkB,IACrB9O,EAAuC8O,EAAvC9O,UAAW+O,EAA4BD,EAA5BC,QAAShO,EAAmB+N,EAAnB/N,SAAUL,EAASoO,EAATpO,KACtC,OACE,qBACEV,UAAS,cAASe,EAAW,SAAW,GAA/B,YAAqCf,GAC9C+O,QAASA,EAETrO,KAAMA,IAKL,SAASsO,GAASF,GACvB,OAAO,cAAC,GAAD,6BAASA,GAAT,IAAgB9O,UAAU,MAG5B,SAASiP,GAASH,GACvB,OAAO,cAAC,GAAD,cAAK9O,UAAU,YAAe8O,IAGhC,SAASI,KACd,OAAO,qBAAKlP,UAAU,U,oEChClBmP,GAAU,IAAIC,KAAa,CAC/BC,KAAM,CACJC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,SACJ,MAAO,UACP,MAAO,UACPC,GAAI,SACJC,GAAI,UAENC,QAAS,EACTC,QAAS,+CACRC,gBAEUC,IAAb,cACE,WAAoBvR,GAAqB,0BAArBA,QAClBC,KAAKuK,KAAOvK,KAAKuK,KAAKgH,KAAKvR,MAF/B,uFAKE,WAAgBuB,GAAhB,UAAAiQ,EAAA,sEACQvB,OADR,OAEED,GAAQyB,cAAclQ,EAAM,QAF9B,2CALF,0HAUE,WAAmBR,GAAnB,kBAAAyQ,EAAA,sDACQjQ,EAAOR,EAAEK,cAAcsQ,aAAa,QACpC9P,EAAWb,EAAEK,cAAcP,UAAUW,SAAS,UAChDD,IAASK,GAAU5B,KAAK2R,UAAUpQ,GAHxC,gDAVF,yEAgBE,SAAYqQ,GAA0B,IAAD,OACnCA,EAAcnN,SAAQ,SAAC1C,GACrB,IAAK,EAAK8P,aAAa9P,GACrB,MAAMoC,MAAM,aAAD,OACIpC,EADJ,iDAGb7B,aAAY,kBAAO,EAAKH,MAAM+B,MAAMC,GAAGH,UAAW,UAtBxD,0BA0BE,SAAqBG,GACnB,OAAO,GAAKA,GAAKA,EAAI/B,KAAKD,MAAM+B,MAAM+D,QAAU9D,EAAI,IAAM,IA3B9D,2BA8BE,WACE/B,KAAKD,MAAM+B,MAAM2C,SAAQ,SAACqN,GACpBA,EAAUlQ,UAAUmQ,QAAQC,IAAR,UAAeF,EAAUvQ,KAAzB,qBAhC9B,uBAoCE,WAEEvB,KAAKD,MAAM+B,MAAM2C,SAAQ,SAACqN,GAAD,OACvB5R,aAAY,kBAAO4R,EAAUlQ,UAAW,UAvC9C,uBA2CE,SACUkQ,GACR5R,aAAY,kBAAO4R,EAAUlQ,UAAYkQ,EAAUlQ,gBA7CvD,4CAoCGrB,KApCH,+GA2CGA,KA3CH,4E,MCnCO,SAAS0R,GAAUtC,GAAe,IAC/BuC,EAAavC,EAAbuC,SACR,OAAO,qBAAKrR,UAAU,YAAf,SAA4BqR,IAG9B,SAASC,GAAUxC,GAAe,IAC/BuC,EAAavC,EAAbuC,SACR,OAAO,qBAAKrR,UAAU,YAAf,SAA4BqR,IAG9B,SAASE,GAAWzC,GAAe,IAChCuC,EAAavC,EAAbuC,SACR,OAAO,qBAAKrR,UAAU,aAAf,SAA6BqR,ICXtC,I,SCFaG,IAAb,cACE,WAAoBtS,GAAoB,0BAApBA,QAClBC,KAAKD,MAAQA,EAFjB,yCAKE,SACKiF,GAAe,IACVsN,EAAYtS,KAAKD,MAAjBuS,QACAjO,EAAoBW,EAApBX,KACJkO,EADwBvN,EAAdC,UACkBtD,KAC9B,SAACI,GAAD,OAAOA,EAAIsQ,EAAeG,UAAUnO,MAGlCkO,EAAgB,GAAK,IACvBA,EAAkBA,EAAgB5Q,KAAI,SAACI,GAAD,OAAOA,EAAI,OAE/CwQ,EAAgBE,OAAM,SAAC1Q,GAAD,OAAOmN,KAAKC,MAAMpN,EAAI,IAAM,OACpDwQ,EAAkBA,EAAgB5Q,KAAI,SAACI,GAAD,OAAOA,EAAI,OACnDwQ,EAAgB9N,SAAQ,SAAC1C,GAAD,OAEtB7B,WADA,EACY,kBAAMoS,EAAQpD,KAAKC,MAAMpN,EAAI,KAAKwI,KAAK,CAACxI,EAAI,aApB9D,uBAwBE,WACa,IAAD,OAEV7B,aAAY,kBACV,EAAKH,MAAMuS,QAAQ7N,SAAQ,SAACiO,GAAD,OAAYA,EAAOnE,oBA5BpD,gCAuCE,WAKE,OAJgBvO,KAAKD,MAAMuS,QACGK,SAAQ,WAAYC,GAAZ,SAAG7S,MACjCyO,cAAc7M,KAAI,SAACI,GAAD,OAAOA,EAAQ,GAAJ6Q,WA1CzC,wBAgDE,SAAyBrR,GAAa,IAC5BuC,EAAmBvC,EAAnBuC,KAAMC,EAAaxC,EAAbwC,SACR8O,EAAgB9O,EAAyB,MAAbA,EAAmB,GAAK,EAAK,EAC/D,OAAOtC,EAAMqR,WAAU,SAACF,GAAD,OAAOA,IAAM9O,KAAQ+O,MAnDhD,uCAKGtS,KALH,0GAwBGA,KAxBH,4ECIawS,IAAb,GAGE,WAAYT,GAAoB,wDAC9BtS,KAAKsS,QAAU7R,YAAW6R,IAJ9B,uCACG7R,KADH,kE,MCJO,SAASuS,GAAUrD,GACxB,OAAO,sCAAS9O,UAAU,aAAgB8O,ICArC,SAASsD,KACd,IAGMX,EAAU,CAAC,EAAG,GAAG3Q,KAAI,SAACI,GAAD,OJDD,SAAC2Q,GAC3B,IAAM3S,EAAQ,IAAI8B,EACZqR,EAAY,IAAI5B,GAAgBvR,GAE9B+B,EAAU/B,EAAV+B,MAoDR,MAAO,CACLqR,OAnDaC,aAAS,kBACtB,eAAC,GAAD,WACE,cAACjB,GAAD,UACG,CAAC,cAACpC,GAAD,GAAe,kBAAqBsD,OAEpCvR,EACGE,QACC,SAAC8P,EAAW/P,GAAZ,OACET,EAAWwQ,EAAUvQ,QACpBD,EAAWQ,GAAOC,EAAI,GAjBL,IAiBqCR,SAE1DI,KAAI,SAACmQ,GAAD,OACHxQ,EAAWwQ,EAAUvQ,MACnB,cAACuO,GAAD,CAEEvO,KAAMuQ,EAAUvQ,KAAOmR,EAAOxN,WAC9B0K,QAAS,SAAC7O,GACRmS,EAAUI,UAAUxB,GACpBoB,EAAUK,aAAaxS,GACvBhB,EAAMyT,mBAER5R,SAAUkQ,EAAUlQ,UAPfkQ,EAAUvQ,MAUjB,cAACwO,GAAD,GAAe+B,EAAUvQ,YAKnC,cAAC0Q,GAAD,UACGnQ,EACEE,QAAO,SAAC8P,GAAD,OAAgBxQ,EAAWwQ,EAAUvQ,SAC5CI,KAAI,SAACmQ,GACJ,OACE,cAACjC,GAAD,CAEEtO,KAAMuQ,EAAUvQ,KAAOmR,EAAOxN,WAC9B0K,QAAS,SAAC7O,GACRmS,EAAUI,UAAUxB,GACpBoB,EAAUK,aAAaxS,GACvBhB,EAAMyT,mBAER5R,SAAUkQ,EAAUlQ,UAPfkQ,EAAUvQ,iBAiB3BxB,QACAwK,KAAM2I,EAAU3I,KAChBgE,UAAW2E,EAAU3E,WI3DWkF,CAAa1R,MACzC2R,EAAepB,EAAQ3Q,KAAI,SAAC+Q,GAAD,MAAa,CAC5C3S,MAAO2S,EAAO3S,MACdwK,KAAMmI,EAAOnI,KACbgE,UAAWmE,EAAOnE,cAEdxO,EAAQ,IAAIgT,GAAWW,GACvBR,EAAY,IAAIb,GAAetS,GAYrC,MAAO,CACL4T,MAXYP,aAAS,kBACrB,mCACE,cAACJ,GAAD,UACGV,EAAQ3Q,KAAI,WAAaI,GAAb,IAAGoR,EAAH,EAAGA,OAAH,OACX,cAACA,EAAD,GAAapR,aAQnBhC,MAAOA,EACPwK,KAAM2I,EAAU3I,KAChBgE,UAAW2E,EAAU3E,UACrBE,mBAAoByE,EAAUzE,oBCzBlC,IAsDamF,GAtDa,WACxB,IAAMC,EAAe,IAAIrT,EACnBsT,EAAmB,IAAIhU,EAAsB+T,GAFrB,EAU1BZ,KALFU,EAL4B,EAK5BA,MACOI,EANqB,EAM5BhU,MACAwK,EAP4B,EAO5BA,KACAgE,EAR4B,EAQ5BA,UACAE,EAT4B,EAS5BA,mBAGI1O,EAAQ,IAAI0P,GAChB,CACE1P,MAAOgU,EACPxJ,OACAgE,YACAE,sBAEF,CACE1O,MAAO8T,EACP7E,aAAc8E,EAAiB9E,aAC/BV,WAAYwF,EAAiBxF,aAI3B4E,EAAY,IAAIhF,GAAqBnO,GAErCa,EAAiB,SAACX,GACtB6T,EAAiB9E,aAAa/O,GAC9BiT,EAAUc,iBAGNC,EAAeb,aAAS,kBAC5B,cAACzS,EAAD,CACEL,UAAWuT,EAAavT,UAAUqM,MAClCxM,YAAa0T,EAAa1T,YAAYwM,MACtC/L,eAAgBA,OAIdsT,EAAa,kBAAMhB,EAAUiB,gBAKnC,OAJAJ,EAAWzB,QAAQ7N,SAAQ,SAACiO,GAC1BA,EAAO3S,MAAMyT,gBAAkBU,KAG1Bd,aAAS,kBACd,sBAAKvS,UAAU,kBAAf,UACE,cAACoT,EAAD,IACA,cAACN,EAAD,UAKqBS,GCnDZC,OATf,WACE,OACE,sBAAKxT,UAAU,MAAf,UACE,mEACA,cAAC,GAAD,QCOSyT,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.7238c1bd.chunk.js","sourcesContent":["import { action, runInAction } from \"mobx\";\nimport { ChordDisplayStore } from \"./ChordDisplayStore\";\n\nexport class ChordDisplayPresenter {\n  private store: ChordDisplayStore;\n\n  constructor(store: ChordDisplayStore) {\n    this.store = store;\n  }\n\n  @action\n  public updateSymbol(symbol: string) {\n    runInAction(() => this.store.chordSymbol.set(symbol));\n  }\n\n  @action\n  public updateName(name: string) {\n    runInAction(() => this.store.chordName.set(name));\n  }\n}\n","import { observable } from \"mobx\";\n\nexport class ChordDisplayStore {\n  @observable readonly chordName = observable.box(\"\");\n  @observable readonly chordSymbol = observable.box(\"\");\n}\n","import React from \"react\";\nimport \"./ChordDisplay.css\";\n\ntype Props = {\n  chordName: string;\n  chordSymbol: string;\n  onChangeSymbol: (symbol: string) => void;\n};\n\nexport function ChordDisplayView({\n  chordName,\n  chordSymbol,\n  onChangeSymbol,\n}: Props) {\n  return (\n    <section className=\"ChordControlsView\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <p>\n          <label>{\"Name: \"}</label>\n          {chordName}\n        </p>\n        <p>\n          <label>{\"Chord: \"}</label>\n          <input\n            value={chordSymbol}\n            type=\"text\"\n            name=\"chordName\"\n            onChange={(e: React.FormEvent<HTMLInputElement>) =>\n              onChangeSymbol(e.currentTarget.value)\n            }\n          />\n        </p>\n      </form>\n    </section>\n  );\n}\n","// Hardcode intervals\n\nexport enum Interval {\n  UNISON = 0,\n  MINOR_SECOND = 1,\n  MAJOR_SECOND = 2,\n  MINOR_THIRD = 3,\n  MAJOR_THIRD = 4,\n  PERFECT_FOURTH = 5,\n  TRITONE = 6,\n  PERFECT_FIFTH = 7,\n  MINOR_SIXTH = 8,\n  MAJOR_SIXTH = 9,\n  DIMINISHED_SEVENTH = 9,\n  MINOR_SEVENTH = 10,\n  MAJOR_SEVENTH = 11,\n  OCTAVE = 12,\n  MINOR_NINTH = OCTAVE + MINOR_SECOND,\n  MAJOR_NINTH = OCTAVE + MAJOR_SECOND,\n  MINOR_TENTH = OCTAVE + MINOR_THIRD,\n  MAJOR_TENTH = OCTAVE + MAJOR_THIRD,\n  PERFECT_ELEVENTH = OCTAVE + PERFECT_FOURTH,\n  COMPOUND_TRITONE = OCTAVE + TRITONE,\n  PERFECT_TWELFTH = OCTAVE + PERFECT_FIFTH,\n  MINOR_THIRTEENTH = OCTAVE + MAJOR_SIXTH,\n  MAJOR_THIRTEENTH = OCTAVE + MAJOR_SIXTH,\n}\n\n// Helper functions\nfunction replace(ints: Interval[], remove: Interval, replacement: Interval) {\n  return ints.map((interval) => (interval === remove ? replacement : interval));\n}\nfunction remove(ints: Interval[], removals: Interval[]) {\n  return ints.filter((i) => !removals.includes(i));\n}\n\nfunction add(ints: Interval[], newInterval: Interval) {\n  if (ints.find((i) => i === newInterval)) {\n    return ints;\n  }\n  ints.push(newInterval);\n  ints.sort();\n  return ints;\n}\n\n/**\n * Modifiers\n * (Interval) modifiers are used to construct interval lists for different chord types.\n * The idea is to construct chords how you might as a human: start with the major chord\n * and then modify or extend it to create other chords. That way, give a chord with a\n * root, quality, extensions etc. we can generate the keys that correspond to that\n * chord.\n */\n\nconst MAJOR = [Interval.UNISON, Interval.MAJOR_THIRD, Interval.PERFECT_FIFTH];\n\n// Chord qualities (major, minor, augment, diminished, power) as chords\ntype Modifier = (ints: Interval[]) => Interval[];\nconst identity = (ints: Interval[]) => ints;\nconst minorThird = (ints: Interval[]) =>\n  replace(ints, Interval.MAJOR_THIRD, Interval.MINOR_THIRD);\nconst augmentedFifth = (ints: Interval[]) =>\n  replace(ints, Interval.PERFECT_FIFTH, Interval.MINOR_SIXTH);\nconst diminishedFifth = (ints: Interval[]) =>\n  replace(ints, Interval.PERFECT_FIFTH, Interval.TRITONE);\n// const minorSeventh = (ints: Interval[]) => add(ints, Interval.MINOR_SEVENTH);\n// const diminishedSeventh = (ints: Interval[]) =>\n// add(ints, Interval.DIMINISHED_SEVENTH);\nconst power = (ints: Interval[]) =>\n  remove(ints, [Interval.MAJOR_THIRD, Interval.MINOR_THIRD]);\nconst sus2 = (ints: Interval[]) => add(power(ints), Interval.MAJOR_SECOND);\nconst sus4 = (ints: Interval[]) => add(power(ints), Interval.PERFECT_FOURTH);\n\n// const MINOR = minorThird(MAJOR);\n// const AUGMENTED = augmentedFifth(MAJOR);\n// const DIMINSHED = diminishedFifth(MINOR);\n// const POWER = power(MAJOR);\n\n// Write chord added intervals (major sixth, major/minor seventh, major 9th/11th/13th)\n// Write chord extensions (b9, 9, 11, #11, b13, 13) and minor 7th modifications (M7)\n// Write chord modifications (sus2, sus4)\n\nexport type Tone = \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"A\" | \"B\";\n\ntype Sharp = \"#\";\ntype Flat = \"b\";\nexport type ToneModifier = undefined | Sharp | Flat;\n\nexport const QUALITY_NAMES = [\n  \"Major\",\n  \"Minor\",\n  \"Augmented\",\n  \"Diminished\",\n  // , \"Half Diminished\"\n  \"Power\",\n  \"Suspended 2nd\",\n  \"Suspended 4th\",\n] as QualityName[];\nexport type QualityName =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  // | \"Half Diminished\"\n  | \"Power\"\n  | \"Suspended 2nd\"\n  | \"Suspended 4th\";\n\ntype TNote = {\n  tone: Tone;\n  modifier: ToneModifier;\n  symbol: string;\n};\n\nexport class Note implements TNote {\n  tone: Tone;\n  modifier: ToneModifier = undefined;\n\n  constructor(tone: Tone, modifier?: ToneModifier) {\n    this.tone = tone;\n    this.modifier = modifier;\n  }\n\n  get symbol() {\n    return this.modifier ? this.tone + this.modifier : this.tone;\n  }\n}\n\nexport class Quality {\n  constructor(readonly quality: QualityName) {}\n\n  get name() {\n    return this.quality;\n  }\n\n  get symbol() {\n    switch (this.quality) {\n      case \"Major\":\n        return \"\";\n      case \"Minor\":\n        return \"m\";\n      case \"Augmented\":\n        return \"+\";\n      case \"Diminished\":\n        return \"o\";\n      // case \"Half Diminished\":\n      //   return;\n      case \"Power\":\n        return \"5\";\n      case \"Suspended 2nd\":\n        return \"sus2\";\n      case \"Suspended 4th\":\n        return \"sus4\";\n      default:\n        throw Error(`Unhandled quality case: ${this.quality}`);\n    }\n  }\n\n  get modifier() {\n    switch (this.name) {\n      case \"Major\":\n        return identity;\n      case \"Minor\":\n        return minorThird;\n      case \"Augmented\":\n        return augmentedFifth;\n      case \"Diminished\":\n        return diminishedFifth;\n      // case \"Half Diminished\":\n      //   return;\n      case \"Power\":\n        return power;\n      case \"Suspended 2nd\":\n        return sus2;\n      case \"Suspended 4th\":\n        return sus4;\n      default:\n        throw Error(`Unhandled quality case: ${this.quality}`);\n    }\n  }\n}\n\nexport type TChordFeatures = {\n  quality: Quality;\n};\n\ntype TChord = TChordFeatures & {\n  root: Note;\n};\n\nexport class Chord implements TChord {\n  private _intervals?: Interval[] = undefined;\n\n  constructor(readonly root: Note, readonly quality: Quality) {}\n\n  get name() {\n    const { root, quality } = this;\n    const names = [root.symbol, quality.name];\n    return names.join(\" \");\n  }\n\n  get symbol() {\n    const { root, quality } = this;\n    const symbols = [root.symbol, quality.symbol];\n    return symbols.join(\"\");\n  }\n\n  get intervals(): Interval[] {\n    if (!this._intervals) {\n      let result = MAJOR;\n      const modifiers: Modifier[] = [this.quality.modifier];\n      modifiers.forEach((f) => (result = f(result)));\n      this._intervals = result;\n    }\n    return this._intervals;\n  }\n}\n","import { computed, observable } from \"mobx\";\n\nexport type NoteState = {\n  note: string;\n  isMarked: boolean;\n};\n\nexport const isKeySharp = (note: string) => note.includes(\"#\");\n\n/**\n * This Note type is used to provide a canonical and human-friendly representation for indexing the notes in an octave's state.\n */\nexport type Note =\n  | \"C\"\n  | \"C#\"\n  | \"D\"\n  | \"D#\"\n  | \"E\"\n  | \"F\"\n  | \"F#\"\n  | \"G\"\n  | \"G#\"\n  | \"A\"\n  | \"A#\"\n  | \"B\";\n\nexport const NOTES: Note[] = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n];\n\nconst DEFAULT_NOTES_STATE = NOTES.map((note) => ({\n  note: note,\n  isMarked: false,\n}));\n\nexport class OctaveStore {\n  @observable readonly notes: NoteState[] = observable(DEFAULT_NOTES_STATE);\n  // Callback property that permits bidirectional state updates through parent ChordFinder\n  @observable onClickCallBack: () => void = () => {};\n\n  @computed\n  get markedIndexes() {\n    return this.notes\n      .map((note, i) => ({ ...note, i }))\n      .filter(({ isMarked }) => isMarked)\n      .map(({ i }) => i);\n  }\n}\n","import {\n  isKeySharp,\n  Note as UINote,\n} from \"../ui/ChordFinder/Piano/Octave/OctaveStore\";\nimport {\n  Chord,\n  Note,\n  Quality,\n  QualityName,\n  QUALITY_NAMES,\n  Tone,\n  ToneModifier,\n} from \"./chords\";\n\n/**\n * Chord features are every attribute of a chord except the root note.\n */\n\ntype ChordFeatureNames = {\n  quality: QualityName;\n};\n\nfunction intervalsToChordFeatures(qualities: QualityName[]) {\n  const root = new Note(\"C\");\n  const chordsWithDistinctFeatures = qualities.map(\n    (q) => new Chord(root, new Quality(q))\n  );\n  const intervalsToFeatures: { [intervals: string]: ChordFeatureNames } = {};\n  chordsWithDistinctFeatures.forEach(\n    (chord) =>\n      /** The same interval list will yield the same string representation even if the arrays are different.\n       * We can't use indexed types (i.e. arrays) as key types for a POJO, so using the string representation\n       * is a suitable substitute.\n       */\n      /** */\n      (intervalsToFeatures[chord.intervals.toString()] = {\n        quality: chord.quality.quality,\n      })\n  );\n  return intervalsToFeatures;\n}\n\nconst INTERVAL_LISTS_TO_CHORD_FEATURES =\n  intervalsToChordFeatures(QUALITY_NAMES);\n\nexport default function parseChordFromPiano(\n  rootSymbol: UINote,\n  intervals: number[]\n): Chord | undefined {\n  const chordFeatures = INTERVAL_LISTS_TO_CHORD_FEATURES[intervals.toString()];\n  if (!chordFeatures) return undefined;\n  const root = new Note(\n    rootSymbol[0] as Tone,\n    isKeySharp(rootSymbol) ? (\"#\" as ToneModifier) : undefined\n  );\n  const quality = new Quality(chordFeatures.quality);\n  const chord = new Chord(root, quality);\n  return chord;\n}\n","/* AutoGenerated Code, changes may be overwritten\n* INPUT GRAMMAR:\n* // This grammar defines chord symbol strings according to this structure:\n* // https://www.stringkick.com/blog-lessons/chord-names-symbols/#section3\n* start := chord\n* tone := 'C' | 'D' | 'E' | 'F' | 'G' | 'A' | 'B'\n* note := tone=tone modifier={'#' | 'b'}?\n* root := note\n* diminished := diminished={'o' | 'dim'}\n* augmented := augmented={'\\+' | 'aug'}\n* // half_diminished := half_diminished={'m7b5' | 'ø'}\n* major := major={'maj' | 'M'}\n* minor := minor={'min' | 'm'}\n* sus2 := sus2='sus2'\n* sus4 := sus4='sus4'\n* sus := sus2 | sus4\n* power := power={'5'}\n* major2 := major=''\n* quality := diminished | augmented | major | minor | sus | power | major2\n* chord := root=root quality=quality $\n*/\ntype Nullable<T> = T | null;\ntype $$RuleType<T> = () => Nullable<T>;\ninterface ASTNodeIntf {\n    kind: ASTKinds;\n}\nexport enum ASTKinds {\n    start = \"start\",\n    tone_1 = \"tone_1\",\n    tone_2 = \"tone_2\",\n    tone_3 = \"tone_3\",\n    tone_4 = \"tone_4\",\n    tone_5 = \"tone_5\",\n    tone_6 = \"tone_6\",\n    tone_7 = \"tone_7\",\n    note = \"note\",\n    note_$0_1 = \"note_$0_1\",\n    note_$0_2 = \"note_$0_2\",\n    root = \"root\",\n    diminished = \"diminished\",\n    diminished_$0_1 = \"diminished_$0_1\",\n    diminished_$0_2 = \"diminished_$0_2\",\n    augmented = \"augmented\",\n    augmented_$0_1 = \"augmented_$0_1\",\n    augmented_$0_2 = \"augmented_$0_2\",\n    major = \"major\",\n    major_$0_1 = \"major_$0_1\",\n    major_$0_2 = \"major_$0_2\",\n    minor = \"minor\",\n    minor_$0_1 = \"minor_$0_1\",\n    minor_$0_2 = \"minor_$0_2\",\n    sus2 = \"sus2\",\n    sus4 = \"sus4\",\n    sus_1 = \"sus_1\",\n    sus_2 = \"sus_2\",\n    power = \"power\",\n    power_$0 = \"power_$0\",\n    major2 = \"major2\",\n    quality_1 = \"quality_1\",\n    quality_2 = \"quality_2\",\n    quality_3 = \"quality_3\",\n    quality_4 = \"quality_4\",\n    quality_5 = \"quality_5\",\n    quality_6 = \"quality_6\",\n    quality_7 = \"quality_7\",\n    chord = \"chord\",\n    $EOF = \"$EOF\",\n}\nexport type start = chord;\nexport type tone = tone_1 | tone_2 | tone_3 | tone_4 | tone_5 | tone_6 | tone_7;\nexport type tone_1 = string;\nexport type tone_2 = string;\nexport type tone_3 = string;\nexport type tone_4 = string;\nexport type tone_5 = string;\nexport type tone_6 = string;\nexport type tone_7 = string;\nexport interface note {\n    kind: ASTKinds.note;\n    tone: tone;\n    modifier: Nullable<note_$0>;\n}\nexport type note_$0 = note_$0_1 | note_$0_2;\nexport type note_$0_1 = string;\nexport type note_$0_2 = string;\nexport type root = note;\nexport interface diminished {\n    kind: ASTKinds.diminished;\n    diminished: diminished_$0;\n}\nexport type diminished_$0 = diminished_$0_1 | diminished_$0_2;\nexport type diminished_$0_1 = string;\nexport type diminished_$0_2 = string;\nexport interface augmented {\n    kind: ASTKinds.augmented;\n    augmented: augmented_$0;\n}\nexport type augmented_$0 = augmented_$0_1 | augmented_$0_2;\nexport type augmented_$0_1 = string;\nexport type augmented_$0_2 = string;\nexport interface major {\n    kind: ASTKinds.major;\n    major: major_$0;\n}\nexport type major_$0 = major_$0_1 | major_$0_2;\nexport type major_$0_1 = string;\nexport type major_$0_2 = string;\nexport interface minor {\n    kind: ASTKinds.minor;\n    minor: minor_$0;\n}\nexport type minor_$0 = minor_$0_1 | minor_$0_2;\nexport type minor_$0_1 = string;\nexport type minor_$0_2 = string;\nexport interface sus2 {\n    kind: ASTKinds.sus2;\n    sus2: string;\n}\nexport interface sus4 {\n    kind: ASTKinds.sus4;\n    sus4: string;\n}\nexport type sus = sus_1 | sus_2;\nexport type sus_1 = sus2;\nexport type sus_2 = sus4;\nexport interface power {\n    kind: ASTKinds.power;\n    power: power_$0;\n}\nexport type power_$0 = string;\nexport interface major2 {\n    kind: ASTKinds.major2;\n    major: string;\n}\nexport type quality = quality_1 | quality_2 | quality_3 | quality_4 | quality_5 | quality_6 | quality_7;\nexport type quality_1 = diminished;\nexport type quality_2 = augmented;\nexport type quality_3 = major;\nexport type quality_4 = minor;\nexport type quality_5 = sus;\nexport type quality_6 = power;\nexport type quality_7 = major2;\nexport interface chord {\n    kind: ASTKinds.chord;\n    root: root;\n    quality: quality;\n}\nexport class Parser {\n    private readonly input: string;\n    private pos: PosInfo;\n    private negating: boolean = false;\n    private memoSafe: boolean = true;\n    constructor(input: string) {\n        this.pos = {overallPos: 0, line: 1, offset: 0};\n        this.input = input;\n    }\n    public reset(pos: PosInfo) {\n        this.pos = pos;\n    }\n    public finished(): boolean {\n        return this.pos.overallPos === this.input.length;\n    }\n    public clearMemos(): void {\n    }\n    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {\n        return this.matchchord($$dpth + 1, $$cr);\n    }\n    public matchtone($$dpth: number, $$cr?: ErrorTracker): Nullable<tone> {\n        return this.choice<tone>([\n            () => this.matchtone_1($$dpth + 1, $$cr),\n            () => this.matchtone_2($$dpth + 1, $$cr),\n            () => this.matchtone_3($$dpth + 1, $$cr),\n            () => this.matchtone_4($$dpth + 1, $$cr),\n            () => this.matchtone_5($$dpth + 1, $$cr),\n            () => this.matchtone_6($$dpth + 1, $$cr),\n            () => this.matchtone_7($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchtone_1($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_1> {\n        return this.regexAccept(String.raw`(?:C)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_2($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_2> {\n        return this.regexAccept(String.raw`(?:D)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_3($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_3> {\n        return this.regexAccept(String.raw`(?:E)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_4($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_4> {\n        return this.regexAccept(String.raw`(?:F)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_5($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_5> {\n        return this.regexAccept(String.raw`(?:G)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_6($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_6> {\n        return this.regexAccept(String.raw`(?:A)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_7($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_7> {\n        return this.regexAccept(String.raw`(?:B)`, $$dpth + 1, $$cr);\n    }\n    public matchnote($$dpth: number, $$cr?: ErrorTracker): Nullable<note> {\n        return this.run<note>($$dpth,\n            () => {\n                let $scope$tone: Nullable<tone>;\n                let $scope$modifier: Nullable<Nullable<note_$0>>;\n                let $$res: Nullable<note> = null;\n                if (true\n                    && ($scope$tone = this.matchtone($$dpth + 1, $$cr)) !== null\n                    && (($scope$modifier = this.matchnote_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.note, tone: $scope$tone, modifier: $scope$modifier};\n                }\n                return $$res;\n            });\n    }\n    public matchnote_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0> {\n        return this.choice<note_$0>([\n            () => this.matchnote_$0_1($$dpth + 1, $$cr),\n            () => this.matchnote_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchnote_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0_1> {\n        return this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr);\n    }\n    public matchnote_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0_2> {\n        return this.regexAccept(String.raw`(?:b)`, $$dpth + 1, $$cr);\n    }\n    public matchroot($$dpth: number, $$cr?: ErrorTracker): Nullable<root> {\n        return this.matchnote($$dpth + 1, $$cr);\n    }\n    public matchdiminished($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished> {\n        return this.run<diminished>($$dpth,\n            () => {\n                let $scope$diminished: Nullable<diminished_$0>;\n                let $$res: Nullable<diminished> = null;\n                if (true\n                    && ($scope$diminished = this.matchdiminished_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.diminished, diminished: $scope$diminished};\n                }\n                return $$res;\n            });\n    }\n    public matchdiminished_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0> {\n        return this.choice<diminished_$0>([\n            () => this.matchdiminished_$0_1($$dpth + 1, $$cr),\n            () => this.matchdiminished_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchdiminished_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0_1> {\n        return this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr);\n    }\n    public matchdiminished_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0_2> {\n        return this.regexAccept(String.raw`(?:dim)`, $$dpth + 1, $$cr);\n    }\n    public matchaugmented($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented> {\n        return this.run<augmented>($$dpth,\n            () => {\n                let $scope$augmented: Nullable<augmented_$0>;\n                let $$res: Nullable<augmented> = null;\n                if (true\n                    && ($scope$augmented = this.matchaugmented_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.augmented, augmented: $scope$augmented};\n                }\n                return $$res;\n            });\n    }\n    public matchaugmented_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0> {\n        return this.choice<augmented_$0>([\n            () => this.matchaugmented_$0_1($$dpth + 1, $$cr),\n            () => this.matchaugmented_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchaugmented_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0_1> {\n        return this.regexAccept(String.raw`(?:\\+)`, $$dpth + 1, $$cr);\n    }\n    public matchaugmented_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0_2> {\n        return this.regexAccept(String.raw`(?:aug)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor($$dpth: number, $$cr?: ErrorTracker): Nullable<major> {\n        return this.run<major>($$dpth,\n            () => {\n                let $scope$major: Nullable<major_$0>;\n                let $$res: Nullable<major> = null;\n                if (true\n                    && ($scope$major = this.matchmajor_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.major, major: $scope$major};\n                }\n                return $$res;\n            });\n    }\n    public matchmajor_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0> {\n        return this.choice<major_$0>([\n            () => this.matchmajor_$0_1($$dpth + 1, $$cr),\n            () => this.matchmajor_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchmajor_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0_1> {\n        return this.regexAccept(String.raw`(?:maj)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0_2> {\n        return this.regexAccept(String.raw`(?:M)`, $$dpth + 1, $$cr);\n    }\n    public matchminor($$dpth: number, $$cr?: ErrorTracker): Nullable<minor> {\n        return this.run<minor>($$dpth,\n            () => {\n                let $scope$minor: Nullable<minor_$0>;\n                let $$res: Nullable<minor> = null;\n                if (true\n                    && ($scope$minor = this.matchminor_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.minor, minor: $scope$minor};\n                }\n                return $$res;\n            });\n    }\n    public matchminor_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0> {\n        return this.choice<minor_$0>([\n            () => this.matchminor_$0_1($$dpth + 1, $$cr),\n            () => this.matchminor_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchminor_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0_1> {\n        return this.regexAccept(String.raw`(?:min)`, $$dpth + 1, $$cr);\n    }\n    public matchminor_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0_2> {\n        return this.regexAccept(String.raw`(?:m)`, $$dpth + 1, $$cr);\n    }\n    public matchsus2($$dpth: number, $$cr?: ErrorTracker): Nullable<sus2> {\n        return this.run<sus2>($$dpth,\n            () => {\n                let $scope$sus2: Nullable<string>;\n                let $$res: Nullable<sus2> = null;\n                if (true\n                    && ($scope$sus2 = this.regexAccept(String.raw`(?:sus2)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sus2, sus2: $scope$sus2};\n                }\n                return $$res;\n            });\n    }\n    public matchsus4($$dpth: number, $$cr?: ErrorTracker): Nullable<sus4> {\n        return this.run<sus4>($$dpth,\n            () => {\n                let $scope$sus4: Nullable<string>;\n                let $$res: Nullable<sus4> = null;\n                if (true\n                    && ($scope$sus4 = this.regexAccept(String.raw`(?:sus4)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sus4, sus4: $scope$sus4};\n                }\n                return $$res;\n            });\n    }\n    public matchsus($$dpth: number, $$cr?: ErrorTracker): Nullable<sus> {\n        return this.choice<sus>([\n            () => this.matchsus_1($$dpth + 1, $$cr),\n            () => this.matchsus_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchsus_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sus_1> {\n        return this.matchsus2($$dpth + 1, $$cr);\n    }\n    public matchsus_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sus_2> {\n        return this.matchsus4($$dpth + 1, $$cr);\n    }\n    public matchpower($$dpth: number, $$cr?: ErrorTracker): Nullable<power> {\n        return this.run<power>($$dpth,\n            () => {\n                let $scope$power: Nullable<power_$0>;\n                let $$res: Nullable<power> = null;\n                if (true\n                    && ($scope$power = this.matchpower_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.power, power: $scope$power};\n                }\n                return $$res;\n            });\n    }\n    public matchpower_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<power_$0> {\n        return this.regexAccept(String.raw`(?:5)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor2($$dpth: number, $$cr?: ErrorTracker): Nullable<major2> {\n        return this.run<major2>($$dpth,\n            () => {\n                let $scope$major: Nullable<string>;\n                let $$res: Nullable<major2> = null;\n                if (true\n                    && ($scope$major = this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.major2, major: $scope$major};\n                }\n                return $$res;\n            });\n    }\n    public matchquality($$dpth: number, $$cr?: ErrorTracker): Nullable<quality> {\n        return this.choice<quality>([\n            () => this.matchquality_1($$dpth + 1, $$cr),\n            () => this.matchquality_2($$dpth + 1, $$cr),\n            () => this.matchquality_3($$dpth + 1, $$cr),\n            () => this.matchquality_4($$dpth + 1, $$cr),\n            () => this.matchquality_5($$dpth + 1, $$cr),\n            () => this.matchquality_6($$dpth + 1, $$cr),\n            () => this.matchquality_7($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchquality_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_1> {\n        return this.matchdiminished($$dpth + 1, $$cr);\n    }\n    public matchquality_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_2> {\n        return this.matchaugmented($$dpth + 1, $$cr);\n    }\n    public matchquality_3($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_3> {\n        return this.matchmajor($$dpth + 1, $$cr);\n    }\n    public matchquality_4($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_4> {\n        return this.matchminor($$dpth + 1, $$cr);\n    }\n    public matchquality_5($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_5> {\n        return this.matchsus($$dpth + 1, $$cr);\n    }\n    public matchquality_6($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_6> {\n        return this.matchpower($$dpth + 1, $$cr);\n    }\n    public matchquality_7($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_7> {\n        return this.matchmajor2($$dpth + 1, $$cr);\n    }\n    public matchchord($$dpth: number, $$cr?: ErrorTracker): Nullable<chord> {\n        return this.run<chord>($$dpth,\n            () => {\n                let $scope$root: Nullable<root>;\n                let $scope$quality: Nullable<quality>;\n                let $$res: Nullable<chord> = null;\n                if (true\n                    && ($scope$root = this.matchroot($$dpth + 1, $$cr)) !== null\n                    && ($scope$quality = this.matchquality($$dpth + 1, $$cr)) !== null\n                    && this.match$EOF($$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.chord, root: $scope$root, quality: $scope$quality};\n                }\n                return $$res;\n            });\n    }\n    public test(): boolean {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        const ans = res !== null;\n        this.reset(mrk);\n        return ans;\n    }\n    public parse(): ParseResult {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        if (res)\n            return {ast: res, errs: []};\n        this.reset(mrk);\n        const rec = new ErrorTracker();\n        this.clearMemos();\n        this.matchstart(0, rec);\n        const err = rec.getErr()\n        return {ast: res, errs: err !== null ? [err] : []}\n    }\n    public mark(): PosInfo {\n        return this.pos;\n    }\n    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {\n        const mrk = this.mark();\n        const res: T[] = [];\n        for (;;) {\n            const t = func();\n            if (t === null) {\n                break;\n            }\n            res.push(t);\n        }\n        if (star || res.length > 0) {\n            return res;\n        }\n        this.reset(mrk);\n        return null;\n    }\n    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn()\n        if (res !== null)\n            return res;\n        this.reset(mrk);\n        return null;\n    }\n    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {\n        for (const f of fns) {\n            const res = f();\n            if (res !== null) {\n                return res;\n            }\n        }\n        return null;\n    }\n    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {\n        return this.run<string>(dpth,\n            () => {\n                const reg = new RegExp(match, \"y\");\n                const mrk = this.mark();\n                reg.lastIndex = mrk.overallPos;\n                const res = this.tryConsume(reg);\n                if(cr) {\n                    cr.record(mrk, res, {\n                        kind: \"RegexMatch\",\n                        // We substring from 3 to len - 1 to strip off the\n                        // non-capture group syntax added as a WebKit workaround\n                        literal: match.substring(3, match.length - 1),\n                        negated: this.negating,\n                    });\n                }\n                return res;\n            });\n    }\n    private tryConsume(reg: RegExp): Nullable<string> {\n        const res = reg.exec(this.input);\n        if (res) {\n            let lineJmp = 0;\n            let lind = -1;\n            for (let i = 0; i < res[0].length; ++i) {\n                if (res[0][i] === \"\\n\") {\n                    ++lineJmp;\n                    lind = i;\n                }\n            }\n            this.pos = {\n                overallPos: reg.lastIndex,\n                line: this.pos.line + lineJmp,\n                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)\n            };\n            return res[0];\n        }\n        return null;\n    }\n    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn();\n        this.reset(mrk);\n        return res;\n    }\n    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {\n        const mrk = this.mark();\n        const oneg = this.negating;\n        this.negating = !oneg;\n        const res = fn();\n        this.negating = oneg;\n        this.reset(mrk);\n        return res === null ? true : null;\n    }\n    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {\n        const $scope$pos = this.mark();\n        const $scope$memoRes = memo.get($scope$pos.overallPos);\n        if(this.memoSafe && $scope$memoRes !== undefined) {\n        this.reset($scope$memoRes[1]);\n        return $scope$memoRes[0];\n        }\n        const $scope$result = rule();\n        if(this.memoSafe)\n        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);\n        return $scope$result;\n    }\n    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {\n        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;\n        if(et)\n            et.record(this.mark(), res, { kind: \"EOF\", negated: this.negating });\n        return res;\n    }\n}\nexport function parse(s: string): ParseResult {\n    const p = new Parser(s);\n    return p.parse();\n}\nexport interface ParseResult {\n    ast: Nullable<start>;\n    errs: SyntaxErr[];\n}\nexport interface PosInfo {\n    readonly overallPos: number;\n    readonly line: number;\n    readonly offset: number;\n}\nexport interface RegexMatch {\n    readonly kind: \"RegexMatch\";\n    readonly negated: boolean;\n    readonly literal: string;\n}\nexport type EOFMatch = { kind: \"EOF\"; negated: boolean };\nexport type MatchAttempt = RegexMatch | EOFMatch;\nexport class SyntaxErr {\n    public pos: PosInfo;\n    public expmatches: MatchAttempt[];\n    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {\n        this.pos = pos;\n        this.expmatches = [...expmatches];\n    }\n    public toString(): string {\n        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === \"EOF\" ? \" EOF\" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;\n    }\n}\nclass ErrorTracker {\n    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};\n    private regexset: Set<string> = new Set();\n    private pmatches: MatchAttempt[] = [];\n    public record(pos: PosInfo, result: any, att: MatchAttempt) {\n        if ((result === null) === att.negated)\n            return;\n        if (pos.overallPos > this.mxpos.overallPos) {\n            this.mxpos = pos;\n            this.pmatches = [];\n            this.regexset.clear()\n        }\n        if (this.mxpos.overallPos === pos.overallPos) {\n            if(att.kind === \"RegexMatch\") {\n                if(!this.regexset.has(att.literal))\n                    this.pmatches.push(att);\n                this.regexset.add(att.literal);\n            } else {\n                this.pmatches.push(att);\n            }\n        }\n    }\n    public getErr(): SyntaxErr | null {\n        if (this.mxpos.overallPos !== -1)\n            return new SyntaxErr(this.mxpos, this.pmatches);\n        return null;\n    }\n}","import {\n  Chord,\n  Note,\n  Quality,\n  QualityName,\n  Tone,\n  ToneModifier,\n} from \"../chords\";\nimport {\n  chord as ParsedChord,\n  parse,\n  quality as ParsedQuality,\n} from \"./parser\";\n\n// || Parsing from symbol\ntype FullParsedQuality = ParsedQuality & {\n  major?: string;\n  minor?: string;\n  augmented?: string;\n  diminished?: string;\n  half_diminished?: string;\n  power?: string;\n  sus2?: string;\n  sus4?: string;\n};\nfunction evaluateQualityName(quality: FullParsedQuality): QualityName {\n  if (quality.major || quality.major === \"\") return \"Major\";\n  if (quality.minor) return \"Minor\";\n  if (quality.augmented) return \"Augmented\";\n  if (quality.diminished) return \"Diminished\";\n  // if (quality.half_diminished) return \"Half Diminished\";\n  if (quality.power) return \"Power\";\n  if (quality.sus2) return \"Suspended 2nd\";\n  if (quality.sus4) return \"Suspended 4th\";\n  throw Error(\"Unhandled quality:\" + JSON.stringify(quality));\n}\n\nexport function evaluateParsedSymbol(chord: ParsedChord | null): Chord {\n  if (chord === null) throw Error(\"Parsed chord is null.\");\n  const { root: _root, quality: _quality } = chord;\n  const root = new Note(_root.tone as Tone, _root.modifier as ToneModifier);\n  const quality = new Quality(evaluateQualityName(_quality));\n  return new Chord(root, quality);\n}\n\nexport function parseChordFromSymbol(chordSymbol: string): Chord | undefined {\n  const { ast } = parse(chordSymbol);\n  if (ast) return evaluateParsedSymbol(ast);\n  return undefined;\n}\n","import { action, computed } from \"mobx\";\nimport parseChordFromPiano from \"../../chords/parseFromPiano\";\nimport { parseChordFromSymbol } from \"../../chords/parseFromSymbol/parseFromSymbol\";\nimport { ChordFinderStore } from \"./ChordFinderStore\";\nimport { NOTES } from \"./Piano/Octave/OctaveStore\";\n\nexport class ChordFinderPresenter {\n  constructor(private store: ChordFinderStore) {}\n\n  @action\n  onSymbolInput() {\n    const chord = this.chordFromSymbol;\n    const { piano, display } = this.store;\n    if (chord) {\n      display.updateName(chord.name);\n      piano.unmarkAll();\n      piano.mark(chord);\n    } else {\n      display.updateName(\"\");\n      piano.unmarkAll();\n    }\n  }\n\n  @action\n  onPianoInput() {\n    let markedIndexes = this.store.piano.markedNotesIndexes();\n    if (markedIndexes.length === 0) return;\n    markedIndexes =\n      ChordFinderPresenter.markedIndexesShiftedDown(markedIndexes);\n    const markedIntervals =\n      ChordFinderPresenter.indexesToIntervals(markedIndexes);\n    const rootSymbol = NOTES[markedIndexes[0]];\n    const chord = parseChordFromPiano(rootSymbol, markedIntervals);\n    const { display } = this.store;\n    if (chord) {\n      display.updateName(chord.name);\n      display.updateSymbol(chord.symbol);\n    } else {\n      display.updateName(\"\");\n      display.updateSymbol(\"\");\n    }\n    // Try to lookup a chord (excluding its root) in the table of known interval lists.\n    // If a chord was found, apply the root to turn it into a chord, and update the display\n  }\n\n  /**\n   * @returns A list of indexes (where the lowest C = 0) of the keys that are currently marked, scaled down where possible.\n   * For example, marking B major (naturally spans the first two octaves) returns [11, 15, 18], while marking C major on\n   * the second octave ([12, 16, 19] in the piano store) returns [0, 4, 7].\n   */\n  private static markedIndexesShiftedDown(markedIndexes: number[]) {\n    // Scale down marked intervals (i.e. C major on the second octave) where possible\n    const octavesToScaleDown =\n      markedIndexes.length > 0\n        ? markedIndexes\n            .map((i) => Math.floor(i / 12))\n            .reduce((previous, current) => Math.min(previous, current))\n        : 0;\n    if (octavesToScaleDown > 0) {\n      return markedIndexes.map((i) => i - octavesToScaleDown * 12);\n    }\n    return markedIndexes;\n  }\n\n  private static indexesToIntervals(indexes: number[]) {\n    if (indexes?.length === 0) return indexes;\n    const root = indexes[0];\n    return indexes.map((i) => i - root);\n  }\n\n  @computed\n  get chordFromSymbol() {\n    const chordSymbol = this.store.display.store.chordSymbol.get();\n    const parsedChord = parseChordFromSymbol(chordSymbol);\n    return parsedChord;\n  }\n}\n","import { Chord } from \"../../chords/chords\";\nimport { ChordDisplayStore } from \"./ChordDisplay/ChordDisplayStore\";\nimport { PianoStore } from \"./Piano/PianoStore\";\n\ntype PianoState = {\n  store: PianoStore;\n  mark: (chord: Chord) => void;\n  unmarkAll: () => void;\n  markedNotesIndexes: () => number[];\n};\n\ntype ChordDisplayState = {\n  store: ChordDisplayStore;\n  updateSymbol: (symbol: string) => void;\n  updateName: (symbol: string) => void;\n};\n\nexport class ChordFinderStore {\n  constructor(\n    readonly piano: PianoState,\n    readonly display: ChordDisplayState\n  ) {}\n}\n","import { Note } from \"../OctaveStore\";\nimport \"./Key.css\";\ntype ClickProps = {\n  onClick: (e: React.MouseEvent) => void;\n};\n\nexport type Props = ClickProps & {\n  isMarked: boolean;\n  note: string;\n};\n\ntype KeyProps = Props & {\n  className?: string;\n};\n\nfunction Key(props: KeyProps) {\n  const { className, onClick, isMarked, note } = props;\n  return (\n    <div\n      className={`Key ${isMarked ? \"Marked\" : \"\"} ${className}`}\n      onClick={onClick}\n      // @ts-ignore\n      note={note}\n    ></div>\n  );\n}\n\nexport function WhiteKey(props: Props) {\n  return <Key {...props} className=\"\" />;\n}\n\nexport function BlackKey(props: Props) {\n  return <Key className=\"BlackKey\" {...props} />;\n}\n\nexport function GhostKey() {\n  return <div className=\"Ghost\" />;\n}\n","import { action, runInAction } from \"mobx\";\nimport { NoteState, OctaveStore } from \"./OctaveStore\";\nimport * as Tone from \"tone\";\n\nconst sampler = new Tone.Sampler({\n  urls: {\n    A0: \"A0.mp3\",\n    C1: \"C1.mp3\",\n    \"D#1\": \"Ds1.mp3\",\n    \"F#1\": \"Fs1.mp3\",\n    A1: \"A1.mp3\",\n    C2: \"C2.mp3\",\n    \"D#2\": \"Ds2.mp3\",\n    \"F#2\": \"Fs2.mp3\",\n    A2: \"A2.mp3\",\n    C3: \"C3.mp3\",\n    \"D#3\": \"Ds3.mp3\",\n    \"F#3\": \"Fs3.mp3\",\n    A3: \"A3.mp3\",\n    C4: \"C4.mp3\",\n    \"D#4\": \"Ds4.mp3\",\n    \"F#4\": \"Fs4.mp3\",\n    A4: \"A4.mp3\",\n    C5: \"C5.mp3\",\n    \"D#5\": \"Ds5.mp3\",\n    \"F#5\": \"Fs5.mp3\",\n    A5: \"A5.mp3\",\n    C6: \"C6.mp3\",\n    \"D#6\": \"Ds6.mp3\",\n    \"F#6\": \"Fs6.mp3\",\n    A6: \"A6.mp3\",\n    C7: \"C7.mp3\",\n    \"D#7\": \"Ds7.mp3\",\n    \"F#7\": \"Fs7.mp3\",\n    A7: \"A7.mp3\",\n    C8: \"C8.mp3\",\n  },\n  release: 1,\n  baseUrl: \"https://tonejs.github.io/audio/salamander/\",\n}).toDestination();\n\nexport class OctavePresenter {\n  constructor(private store: OctaveStore) {\n    this.mark = this.mark.bind(this);\n  }\n\n  async playSound(note: string) {\n    await Tone.loaded();\n    sampler.triggerAttack(note, \"0.3s\");\n  }\n\n  async onClickSound(e: React.MouseEvent) {\n    const note = e.currentTarget.getAttribute(\"note\");\n    const isMarked = e.currentTarget.className.includes(\"Marked\");\n    if (note && !isMarked) this.playSound(note);\n  }\n\n  public mark(indexesToMark: number[]) {\n    indexesToMark.forEach((i) => {\n      if (!this.isValidIndex(i))\n        throw Error(\n          `The index ${i} is invalid (not an integer between [0,11]).`\n        );\n      runInAction(() => (this.store.notes[i].isMarked = true));\n    });\n  }\n\n  private isValidIndex(i: number) {\n    return 0 <= i && i < this.store.notes.length && i % 1 === 0;\n  }\n\n  logMarkedKeys() {\n    this.store.notes.forEach((noteState) => {\n      if (noteState.isMarked) console.log(`${noteState.note} is marked!`);\n    });\n  }\n\n  @action\n  public unmarkAll() {\n    this.store.notes.forEach((noteState) =>\n      runInAction(() => (noteState.isMarked = false))\n    );\n  }\n\n  @action\n  toggleKey(noteState: NoteState) {\n    runInAction(() => (noteState.isMarked = !noteState.isMarked));\n  }\n}\n","import \"./OctaveView.css\";\n\nexport type Props = {\n  children: JSX.Element[];\n};\n\nexport function WhiteKeys(props: Props) {\n  const { children } = props;\n  return <div className=\"WhiteKeys\">{children}</div>;\n}\n\nexport function BlackKeys(props: Props) {\n  const { children } = props;\n  return <div className=\"BlackKeys\">{children}</div>;\n}\n\nexport function OctaveView(props: Props) {\n  const { children } = props;\n  return <div className=\"OctaveView\">{children}</div>;\n}\n","import { BlackKey, WhiteKey, GhostKey } from \"./key/Key\";\nimport { observer } from \"mobx-react\";\nimport { isKeySharp, OctaveStore } from \"./OctaveStore\";\nimport { OctavePresenter } from \"./OctavePresenter\";\nimport { OctaveView, BlackKeys, WhiteKeys } from \"./OctaveView\";\nimport React from \"react\";\n\nconst NUMBER_OF_NOTES_IN_OCTAVE = 12;\n\nexport const createOctave = (octave: number) => {\n  const store = new OctaveStore();\n  const presenter = new OctavePresenter(store);\n\n  const { notes } = store;\n\n  const Octave = observer(() => (\n    <OctaveView>\n      <BlackKeys>\n        {[<GhostKey key={\"B placeholder\"} />].concat(\n          // We want to link the sharp key states and pad the grid with ghost keys\n          notes\n            .filter(\n              (noteState, i) =>\n                isKeySharp(noteState.note) ||\n                !isKeySharp(notes[(i + 1) % NUMBER_OF_NOTES_IN_OCTAVE].note)\n            )\n            .map((noteState) =>\n              isKeySharp(noteState.note) ? (\n                <BlackKey\n                  key={noteState.note}\n                  note={noteState.note + octave.toString()}\n                  onClick={(e: React.MouseEvent) => {\n                    presenter.toggleKey(noteState);\n                    presenter.onClickSound(e);\n                    store.onClickCallBack();\n                  }}\n                  isMarked={noteState.isMarked}\n                ></BlackKey>\n              ) : (\n                <GhostKey key={noteState.note} />\n              )\n            )\n        )}\n      </BlackKeys>\n      <WhiteKeys>\n        {notes\n          .filter((noteState) => !isKeySharp(noteState.note))\n          .map((noteState) => {\n            return (\n              <WhiteKey\n                key={noteState.note}\n                note={noteState.note + octave.toString()}\n                onClick={(e: React.MouseEvent) => {\n                  presenter.toggleKey(noteState);\n                  presenter.onClickSound(e);\n                  store.onClickCallBack();\n                }}\n                isMarked={noteState.isMarked}\n              ></WhiteKey>\n            );\n          })}\n      </WhiteKeys>\n    </OctaveView>\n  ));\n\n  return {\n    Octave,\n    store,\n    mark: presenter.mark,\n    unmarkAll: presenter.unmarkAll,\n  };\n};\n","import { action, runInAction } from \"mobx\";\nimport { Chord, Note } from \"../../../chords/chords\";\nimport { NOTES } from \"./Octave/OctaveStore\";\nimport { PianoStore } from \"./PianoStore\";\n\nexport class PianoPresenter {\n  constructor(private store: PianoStore) {\n    this.store = store;\n  }\n\n  @action\n  mark(chord: Chord) {\n    const { octaves } = this.store;\n    const { root, intervals } = chord;\n    let scaledIntervals = intervals.map(\n      (i) => i + PianoPresenter.noteIndex(root)\n    );\n    // Edge case: Cb should be scaled up an octave\n    if (scaledIntervals[0] < 0)\n      scaledIntervals = scaledIntervals.map((i) => i + 12);\n    // Edge case: chords should be scaled down an octave where possible\n    if (scaledIntervals.every((i) => Math.floor(i / 12) > 0))\n      scaledIntervals = scaledIntervals.map((i) => i - 12);\n    scaledIntervals.forEach((i) =>\n      // do we need runinaction here?\n      runInAction(() => octaves[Math.floor(i / 12)].mark([i % 12]))\n    );\n  }\n\n  @action\n  unmarkAll() {\n    // does using runinaction outside the foreach make a difference to above?\n    runInAction(() =>\n      this.store.octaves.forEach((octave) => octave.unmarkAll())\n    );\n  }\n\n  /**\n   * @returns A list of indexes (where the lowest C = 0) of the keys that are currently marked.   *\n   *\n   * This is not a getter or mobx-computed value because it is not used by a reaction, and therefore will cache its initial value ([]).\n   * Calling this method forces it to eagerly evaluate every time. This is useful because it allows clicking on a piano key to trigger\n   * an update, rather than relying on mobx-reactions.\n   */\n  markedNotesIndexes() {\n    const octaves = this.store.octaves;\n    const markedIndexes = octaves.flatMap(({ store }, n) =>\n      store.markedIndexes.map((i) => i + n * 12)\n    );\n    return markedIndexes;\n  }\n\n  /** Return the index for a note, where C = 0 and B = 11. */\n  private static noteIndex(note: Note) {\n    const { tone, modifier } = note;\n    const modifierShift = modifier ? (modifier === \"#\" ? 1 : -1) : 0;\n    return NOTES.findIndex((n) => n === tone) + modifierShift;\n  }\n}\n\nexport {};\n","import { observable } from \"mobx\";\nimport { OctaveStore } from \"./Octave/OctaveStore\";\n\ntype Octave = {\n  store: OctaveStore;\n  mark: (indexesToMark: number[]) => void;\n  unmarkAll: () => void;\n};\n\nexport class PianoStore {\n  @observable readonly octaves: Octave[];\n\n  constructor(octaves: Octave[]) {\n    this.octaves = observable(octaves);\n  }\n}\n","import \"./Piano.css\";\n\ntype Props = {\n  children: JSX.Element[];\n};\nexport function PianoView(props: Props) {\n  return <section className=\"PianoView\" {...props}></section>;\n}\n","import { observer } from \"mobx-react\";\nimport { createOctave } from \"./Octave/Octave\";\nimport { PianoPresenter } from \"./PianoPresenter\";\nimport { PianoStore } from \"./PianoStore\";\nimport { PianoView } from \"./PianoView\";\n\nexport function createPiano() {\n  const NUMBER_OCTAVES = 2;\n\n  // Combine octaves' stores into the piano's store\n  const octaves = [3, 4].map((i) => createOctave(i));\n  const octaveStores = octaves.map((octave) => ({\n    store: octave.store,\n    mark: octave.mark,\n    unmarkAll: octave.unmarkAll,\n  }));\n  const store = new PianoStore(octaveStores);\n  const presenter = new PianoPresenter(store);\n\n  const Piano = observer(() => (\n    <>\n      <PianoView>\n        {octaves.map(({ Octave }, i) => (\n          <Octave key={i} />\n        ))}\n      </PianoView>\n    </>\n  ));\n\n  return {\n    Piano,\n    store: store,\n    mark: presenter.mark,\n    unmarkAll: presenter.unmarkAll,\n    markedNotesIndexes: presenter.markedNotesIndexes,\n  };\n}\n\nexport {};\n","import { observer } from \"mobx-react\";\nimport { ChordDisplayPresenter } from \"./ChordDisplay/ChordDisplayPresenter\";\nimport { ChordDisplayStore } from \"./ChordDisplay/ChordDisplayStore\";\nimport { ChordDisplayView } from \"./ChordDisplay/ChordDisplayView\";\nimport \"./ChordFinder.css\";\nimport { ChordFinderPresenter } from \"./ChordFinderPresenter\";\nimport { ChordFinderStore } from \"./ChordFinderStore\";\nimport { createPiano } from \"./Piano/Piano\";\n\nconst createChordFinder = () => {\n  const displayStore = new ChordDisplayStore();\n  const displayPresenter = new ChordDisplayPresenter(displayStore);\n\n  const {\n    Piano,\n    store: pianoStore,\n    mark,\n    unmarkAll,\n    markedNotesIndexes,\n  } = createPiano();\n\n  const store = new ChordFinderStore(\n    {\n      store: pianoStore,\n      mark,\n      unmarkAll,\n      markedNotesIndexes,\n    },\n    {\n      store: displayStore,\n      updateSymbol: displayPresenter.updateSymbol,\n      updateName: displayPresenter.updateName,\n    }\n  );\n\n  const presenter = new ChordFinderPresenter(store);\n\n  const onChangeSymbol = (symbol: string) => {\n    displayPresenter.updateSymbol(symbol);\n    presenter.onSymbolInput();\n  };\n\n  const ChordDisplay = observer(() => (\n    <ChordDisplayView\n      chordName={displayStore.chordName.get()}\n      chordSymbol={displayStore.chordSymbol.get()}\n      onChangeSymbol={onChangeSymbol}\n    ></ChordDisplayView>\n  ));\n\n  const onClickKey = () => presenter.onPianoInput();\n  pianoStore.octaves.forEach((octave) => {\n    octave.store.onClickCallBack = onClickKey;\n  });\n\n  return observer(() => (\n    <div className=\"ChordFinderView\">\n      <ChordDisplay></ChordDisplay>\n      <Piano></Piano>\n    </div>\n  ));\n};\n\nexport const ChordFinder = createChordFinder();\n","import \"./App.css\";\nimport { ChordFinder } from \"./ui/ChordFinder/ChordFinder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>🎼 Mapiano 🎵</h1>\n      <ChordFinder />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}