{"version":3,"sources":["ui/ChordFinder/ChordDisplay/ChordDisplayPresenter.ts","ui/ChordFinder/ChordDisplay/ChordDisplayStore.ts","ui/ChordFinder/ChordDisplay/ChordDisplayView.tsx","ui/ChordFinder/Piano/Octave/key/Key.tsx","ui/ChordFinder/Piano/Octave/OctaveStore.tsx","ui/ChordFinder/Piano/Octave/OctavePresenter.tsx","ui/ChordFinder/Piano/Octave/OctaveView.tsx","ui/ChordFinder/Piano/Octave/Octave.tsx","ui/ChordFinder/Piano/PianoPresenter.tsx","ui/ChordFinder/Piano/PianoStore.tsx","ui/ChordFinder/Piano/PianoView.tsx","ui/ChordFinder/Piano/Piano.tsx","ui/ChordFinder/ChordFinderStore.ts","chords/parser.ts","chords/chords.ts","ui/ChordFinder/ChordFinderPresenter.ts","ui/ChordFinder/ChordFinder.tsx","ui/ChordFinder/ChordDisplay/ChordDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChordDisplayPresenter","store","this","symbol","runInAction","chordSymbol","set","name","chordName","action","ChordDisplayStore","observable","box","ChordDisplayView","onChangeSymbol","className","onSubmit","e","preventDefault","value","type","onChange","currentTarget","Key","props","onClick","isMarked","WhiteKey","BlackKey","GhostKey","NOTES","DEFAULT_NOTES_STATE","map","note","OctaveStore","notes","n","i","filter","computed","OctavePresenter","indexesToMark","forEach","length","noteState","console","log","WhiteKeys","children","BlackKeys","OctaveView","isKeySharp","includes","PianoPresenter","pressedNotes","octaves","toString","chord","root","scaledIntervals","intervals","noteIndex","every","Math","floor","mark","octave","unmarkAll","tone","modifier","modifierShift","findIndex","PianoStore","flatMap","markedIndexes","PianoView","createPiano","Array","_","presenter","Octave","observer","concat","a","toggleKey","createOctave","octaveStores","Piano","ASTKinds","ChordFinderStore","piano","display","Parser","input","pos","negating","memoSafe","overallPos","line","offset","$$dpth","$$cr","matchchord","choice","matchtone_1","matchtone_2","matchtone_3","matchtone_4","matchtone_5","matchtone_6","matchtone_7","regexAccept","String","raw","run","$scope$tone","$scope$modifier","$$res","matchtone","matchnote_$0","kind","matchnote_$0_1","matchnote_$0_2","matchnote","$scope$diminished","matchdiminished_$0","diminished","matchdiminished_$0_1","matchdiminished_$0_2","$scope$augmented","matchaugmented_$0","augmented","matchaugmented_$0_1","matchaugmented_$0_2","$scope$major","matchmajor_$0","major","matchmajor_$0_1","matchmajor_$0_2","$scope$minor","matchminor_$0","minor","matchminor_$0_1","matchminor_$0_2","$scope$sus2","sus2","$scope$sus4","sus4","matchsus_1","matchsus_2","matchsus2","matchsus4","$scope$power","matchpower_$0","power","major2","matchquality_1","matchquality_2","matchquality_3","matchquality_4","matchquality_5","matchquality_6","matchquality_7","matchdiminished","matchaugmented","matchmajor","matchminor","matchsus","matchpower","matchmajor2","$scope$root","$scope$quality","matchroot","matchquality","match$EOF","quality","mrk","ans","matchstart","reset","res","ast","errs","rec","ErrorTracker","clearMemos","err","getErr","func","star","t","push","fn","fns","f","match","dpth","cr","reg","RegExp","lastIndex","tryConsume","record","literal","substring","negated","exec","lineJmp","lind","oneg","rule","memo","$scope$pos","$scope$memoRes","get","undefined","$scope$result","et","finished","$EOF","Interval","SyntaxErr","expmatches","x","mxpos","regexset","Set","pmatches","result","att","clear","has","add","replace","ints","remove","replacement","interval","newInterval","find","sort","MAJOR","UNISON","MAJOR_THIRD","PERFECT_FIFTH","identity","minorThird","MINOR_THIRD","augmentedFifth","MINOR_SIXTH","diminishedFifth","TRITONE","removals","MAJOR_SECOND","PERFECT_FOURTH","MINOR","Note","Chord","_intervals","join","qualityModifier","evaluate","Error","_root","_quality","JSON","stringify","evaluateQuality","parseToChord","parse","ChordFinderPresenter","reaction","chordFromSymbol","updateName","ChordFinder","pianoStore","ChordDisplay","updateSymbol","createChordDisplay","displayStore","createChordFinder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.400b8c7a.chunk.js","sourcesContent":["import { action, runInAction } from \"mobx\";\nimport { ChordDisplayStore } from \"./ChordDisplayStore\";\n\nexport class ChordDisplayPresenter {\n  private store: ChordDisplayStore;\n\n  constructor(store: ChordDisplayStore) {\n    this.store = store;\n  }\n\n  @action\n  public updateSymbol(symbol: string) {\n    runInAction(() => this.store.chordSymbol.set(symbol));\n  }\n\n  @action\n  public updateName(name: string) {\n    runInAction(() => this.store.chordName.set(name));\n  }\n}\n","import { observable } from \"mobx\";\n\nexport class ChordDisplayStore {\n  @observable readonly chordName = observable.box(\"\");\n  @observable readonly chordSymbol = observable.box(\"\");\n}\n","import React from \"react\";\nimport \"./ChordDisplay.css\";\n\ntype Props = {\n  chordName: string;\n  chordSymbol: string;\n  onChangeSymbol: (symbol: string) => void;\n};\n\nexport function ChordDisplayView({\n  chordName,\n  chordSymbol,\n  onChangeSymbol,\n}: Props) {\n  return (\n    <section className=\"ChordControlsView\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <p>\n          <label>{\"Name: \"}</label>\n          {chordName}\n        </p>\n        <p>\n          <label>{\"Chord: \"}</label>\n          <input\n            value={chordSymbol}\n            type=\"text\"\n            name=\"chordName\"\n            onChange={(e: React.FormEvent<HTMLInputElement>) =>\n              onChangeSymbol(e.currentTarget.value)\n            }\n          />\n        </p>\n      </form>\n    </section>\n  );\n}\n","import \"./Key.css\";\ntype ClickProps = {\n  onClick: () => {};\n};\n\nexport type Props = ClickProps & {\n  isMarked: boolean;\n};\n\ntype KeyProps = Props & {\n  className?: string;\n};\n\nfunction Key(props: KeyProps) {\n  const { className, onClick, isMarked } = props;\n  return (\n    <div\n      className={`Key ${isMarked ? \"Marked\" : \"\"} ${className}`}\n      onClick={onClick}\n    ></div>\n  );\n}\n\nexport function WhiteKey(props: Props) {\n  return <Key {...props} className=\"\" />;\n}\n\nexport function BlackKey(props: Props) {\n  return <Key className=\"BlackKey\" {...props} />;\n}\n\nexport function GhostKey() {\n  return <div className=\"Ghost\" />;\n}\n","import { computed, observable } from \"mobx\";\n\nexport type NoteState = {\n  note: string;\n  isMarked: boolean;\n};\n\n/**\n * This Note type is used to provide a canonical and human-friendly representation for indexing the notes in an octave's state.\n */\nexport type Note =\n  | \"C\"\n  | \"C#\"\n  | \"D\"\n  | \"D#\"\n  | \"E\"\n  | \"F\"\n  | \"F#\"\n  | \"G\"\n  | \"G#\"\n  | \"A\"\n  | \"A#\"\n  | \"B\";\n\nexport const NOTES: Note[] = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n];\n\nconst DEFAULT_NOTES_STATE = NOTES.map((note) => ({\n  note: note,\n  isMarked: false,\n}));\n\nexport class OctaveStore {\n  @observable readonly notes: NoteState[] = observable(DEFAULT_NOTES_STATE);\n\n  @computed\n  get markedIndexes() {\n    return this.notes\n      .map((n, i) => ({ ...n, i }))\n      .filter(({ isMarked }) => isMarked)\n      .map(({ i }) => i);\n  }\n}\n","import { action, runInAction } from \"mobx\";\nimport { NoteState, OctaveStore } from \"./OctaveStore\";\n\nexport class OctavePresenter {\n  constructor(private store: OctaveStore) {\n    // const cMinor = [0, 3, 7];\n    // setTimeout(() => {\n    //   this.mark(cMinor);\n    // }, 1000);\n    // setTimeout(() => {\n    //   this.unmarkAll();\n    // }, 3000);\n  }\n\n  public mark(indexesToMark: number[]) {\n    indexesToMark.forEach((i) => {\n      // if (!this.isValidIndex(i))\n      //   throw Error(\n      //     `The index ${i} is invalid (not an integer between [0,11]).`\n      //   );\n      runInAction(() => (this.store.notes[i].isMarked = true));\n    });\n  }\n\n  private isValidIndex(i: number) {\n    return 0 <= i && i < this.store.notes.length && i % 1 === 0;\n  }\n\n  logMarkedKeys() {\n    this.store.notes.forEach((noteState) => {\n      if (noteState.isMarked) console.log(`${noteState.note} is marked!`);\n    });\n  }\n\n  @action\n  public unmarkAll() {\n    this.store.notes.forEach((noteState) =>\n      runInAction(() => (noteState.isMarked = false))\n    );\n  }\n\n  @action\n  toggleKey(noteState: NoteState) {\n    runInAction(() => (noteState.isMarked = !noteState.isMarked));\n  }\n}\n","import \"./OctaveView.css\";\n\nexport type Props = {\n  children: JSX.Element[];\n};\n\nexport function WhiteKeys(props: Props) {\n  const { children } = props;\n  return <div className=\"WhiteKeys\">{children}</div>;\n}\n\nexport function BlackKeys(props: Props) {\n  const { children } = props;\n  return <div className=\"BlackKeys\">{children}</div>;\n}\n\nexport function OctaveView(props: Props) {\n  const { children } = props;\n  return <div className=\"OctaveView\">{children}</div>;\n}\n","import { BlackKey, WhiteKey, GhostKey } from \"./key/Key\";\nimport { observer } from \"mobx-react\";\nimport { OctaveStore } from \"./OctaveStore\";\nimport { OctavePresenter } from \"./OctavePresenter\";\nimport { OctaveView, BlackKeys, WhiteKeys } from \"./OctaveView\";\n\nconst NUMBER_OF_NOTES_IN_OCTAVE = 12;\n\nconst isKeySharp = (note: string) => note.includes(\"#\");\n\nexport const createOctave = () => {\n  const store = new OctaveStore();\n  const presenter = new OctavePresenter(store);\n\n  const { notes } = store;\n\n  const { mark, unmarkAll } = presenter;\n\n  const Octave = observer(() => (\n    <OctaveView>\n      <BlackKeys>\n        {[<GhostKey key={\"B placeholder\"} />].concat(\n          // We want to link the sharp key states and pad the grid with ghost keys\n          notes\n            .filter(\n              (noteState, i) =>\n                isKeySharp(noteState.note) ||\n                !isKeySharp(notes[(i + 1) % NUMBER_OF_NOTES_IN_OCTAVE].note)\n            )\n            .map((noteState) =>\n              isKeySharp(noteState.note) ? (\n                <BlackKey\n                  key={noteState.note}\n                  onClick={async () => presenter.toggleKey(noteState)}\n                  isMarked={noteState.isMarked}\n                ></BlackKey>\n              ) : (\n                <GhostKey key={noteState.note} />\n              )\n            )\n        )}\n      </BlackKeys>\n      <WhiteKeys>\n        {notes\n          .filter((noteState) => !isKeySharp(noteState.note))\n          .map((noteState) => {\n            return (\n              <WhiteKey\n                key={noteState.note}\n                onClick={async () => presenter.toggleKey(noteState)}\n                isMarked={noteState.isMarked}\n              ></WhiteKey>\n            );\n          })}\n      </WhiteKeys>\n    </OctaveView>\n  ));\n\n  return { Octave, store, mark, unmarkAll };\n};\n","import { action, computed, runInAction } from \"mobx\";\nimport { Chord, Note } from \"../../../chords/chords\";\nimport { NOTES } from \"./Octave/OctaveStore\";\nimport { PianoStore } from \"./PianoStore\";\n\n// const isInteger = (n: number) => n % 1 === 0;\n// const positiveModulo = (i: number, n: number) => ((i % n) + n) % n;\n\nexport class PianoPresenter {\n  constructor(private store: PianoStore) {\n    this.store = store;\n  }\n\n  @computed\n  get findChord() {\n    const pressedNotes = this.store.octaves[0].store.notes\n      .filter((n) => n.isMarked)\n      .map((n) => n.note);\n    console.log(pressedNotes);\n    return pressedNotes.toString();\n  }\n\n  @action\n  mark(chord: Chord) {\n    const { octaves } = this.store;\n    const { root, intervals } = chord;\n    let scaledIntervals = intervals.map(\n      (i) => i + PianoPresenter.noteIndex(root)\n    );\n    // Edge case: Cb should be scaled up an octave\n    if (scaledIntervals[0] < 0)\n      scaledIntervals = scaledIntervals.map((i) => i + 12);\n    // Edge case: chords should be scaled down an octave where possible\n    if (scaledIntervals.every((i) => Math.floor(i / 12) > 0))\n      scaledIntervals = scaledIntervals.map((i) => i - 12);\n    scaledIntervals.forEach((i) =>\n      // do we need runinaction here?\n      runInAction(() => octaves[Math.floor(i / 12)].mark([i % 12]))\n    );\n  }\n\n  @action\n  unmarkAll() {\n    // does using runinaction outside the foreach make a difference to above?\n    runInAction(() =>\n      this.store.octaves.forEach((octave) => octave.unmarkAll())\n    );\n  }\n\n  /** Return the index for a note, where C = 0 and B = 11. */\n  private static noteIndex(note: Note) {\n    const { tone, modifier } = note;\n    const modifierShift = modifier ? (modifier === \"#\" ? 1 : -1) : 0;\n    return NOTES.findIndex((n) => n === tone) + modifierShift;\n  }\n}\n\nexport {};\n","import { computed, observable } from \"mobx\";\nimport { OctaveStore } from \"./Octave/OctaveStore\";\n\ntype Octave = {\n  store: OctaveStore;\n  mark: (indexesToMark: number[]) => void;\n  unmarkAll: () => void;\n};\n\nexport class PianoStore {\n  @observable readonly octaves: Octave[];\n\n  constructor(octaves: Octave[]) {\n    this.octaves = observable(octaves);\n  }\n\n  @computed\n  get markedNotesIndexes() {\n    return this.octaves.flatMap(({ store }, n) =>\n      store.markedIndexes.map((i) => i + n * 12)\n    );\n  }\n}\n","import { Props } from \"./Octave/OctaveView\";\nimport \"./Piano.css\";\n\nexport function PianoView(props: Props) {\n  return <section className=\"PianoView\">{props.children}</section>;\n}\n","import { observer } from \"mobx-react\";\nimport { createOctave } from \"./Octave/Octave\";\nimport { PianoPresenter } from \"./PianoPresenter\";\nimport { PianoStore } from \"./PianoStore\";\nimport { PianoView } from \"./PianoView\";\n\nexport function createPiano() {\n  const NUMBER_OCTAVES = 2;\n\n  // Combine octaves' stores into the piano's store\n  const octaves = [...Array(NUMBER_OCTAVES)].map((_) => createOctave());\n  const octaveStores = octaves.map((octave) => ({\n    store: octave.store,\n    mark: octave.mark,\n    unmarkAll: octave.unmarkAll,\n  }));\n  const store = new PianoStore(octaveStores);\n  const presenter = new PianoPresenter(store);\n\n  const Piano = observer(() => (\n    <>\n      <PianoView>\n        {octaves.map(({ Octave }, i) => (\n          <Octave key={i} />\n        ))}\n      </PianoView>\n    </>\n  ));\n\n  return {\n    Piano,\n    store: store,\n    mark: presenter.mark,\n    unmarkAll: presenter.unmarkAll,\n  };\n}\n\nexport {};\n","import { Chord } from \"../../chords/chords\";\nimport { ChordDisplayStore } from \"./ChordDisplay/ChordDisplayStore\";\nimport { PianoStore } from \"./Piano/PianoStore\";\n\ntype PianoState = {\n  store: PianoStore;\n  mark: (chord: Chord) => void;\n  unmarkAll: () => void;\n};\n\ntype ChordDisplayState = {\n  store: ChordDisplayStore;\n  updateSymbol: (symbol: string) => void;\n  updateName: (symbol: string) => void;\n};\n\nexport class ChordFinderStore {\n  constructor(\n    readonly piano: PianoState,\n    readonly display: ChordDisplayState\n  ) {}\n}\n","/* AutoGenerated Code, changes may be overwritten\n* INPUT GRAMMAR:\n* // This grammar defines chord symbol strings according to this structure:\n* // https://www.stringkick.com/blog-lessons/chord-names-symbols/#section3\n* start := chord\n* tone := 'C' | 'D' | 'E' | 'F' | 'G' | 'A' | 'B'\n* note := tone=tone modifier={'#' | 'b'}?\n* root := note\n* diminished := diminished={'o' | 'dim'}\n* augmented := augmented={'\\+' | 'aug'}\n* // half_diminished := half_diminished={'m7b5' | 'ø'}\n* major := major={'maj' | 'M'}\n* minor := minor={'min' | 'm'}\n* sus2 := sus2='sus2'\n* sus4 := sus4='sus4'\n* sus := sus2 | sus4\n* power := power={'5'}\n* major2 := major=''\n* quality := diminished | augmented | major | minor | sus | power | major2\n* chord := root=root quality=quality $\n*/\ntype Nullable<T> = T | null;\ntype $$RuleType<T> = () => Nullable<T>;\ninterface ASTNodeIntf {\n    kind: ASTKinds;\n}\nexport enum ASTKinds {\n    start = \"start\",\n    tone_1 = \"tone_1\",\n    tone_2 = \"tone_2\",\n    tone_3 = \"tone_3\",\n    tone_4 = \"tone_4\",\n    tone_5 = \"tone_5\",\n    tone_6 = \"tone_6\",\n    tone_7 = \"tone_7\",\n    note = \"note\",\n    note_$0_1 = \"note_$0_1\",\n    note_$0_2 = \"note_$0_2\",\n    root = \"root\",\n    diminished = \"diminished\",\n    diminished_$0_1 = \"diminished_$0_1\",\n    diminished_$0_2 = \"diminished_$0_2\",\n    augmented = \"augmented\",\n    augmented_$0_1 = \"augmented_$0_1\",\n    augmented_$0_2 = \"augmented_$0_2\",\n    major = \"major\",\n    major_$0_1 = \"major_$0_1\",\n    major_$0_2 = \"major_$0_2\",\n    minor = \"minor\",\n    minor_$0_1 = \"minor_$0_1\",\n    minor_$0_2 = \"minor_$0_2\",\n    sus2 = \"sus2\",\n    sus4 = \"sus4\",\n    sus_1 = \"sus_1\",\n    sus_2 = \"sus_2\",\n    power = \"power\",\n    power_$0 = \"power_$0\",\n    major2 = \"major2\",\n    quality_1 = \"quality_1\",\n    quality_2 = \"quality_2\",\n    quality_3 = \"quality_3\",\n    quality_4 = \"quality_4\",\n    quality_5 = \"quality_5\",\n    quality_6 = \"quality_6\",\n    quality_7 = \"quality_7\",\n    chord = \"chord\",\n    $EOF = \"$EOF\",\n}\nexport type start = chord;\nexport type tone = tone_1 | tone_2 | tone_3 | tone_4 | tone_5 | tone_6 | tone_7;\nexport type tone_1 = string;\nexport type tone_2 = string;\nexport type tone_3 = string;\nexport type tone_4 = string;\nexport type tone_5 = string;\nexport type tone_6 = string;\nexport type tone_7 = string;\nexport interface note {\n    kind: ASTKinds.note;\n    tone: tone;\n    modifier: Nullable<note_$0>;\n}\nexport type note_$0 = note_$0_1 | note_$0_2;\nexport type note_$0_1 = string;\nexport type note_$0_2 = string;\nexport type root = note;\nexport interface diminished {\n    kind: ASTKinds.diminished;\n    diminished: diminished_$0;\n}\nexport type diminished_$0 = diminished_$0_1 | diminished_$0_2;\nexport type diminished_$0_1 = string;\nexport type diminished_$0_2 = string;\nexport interface augmented {\n    kind: ASTKinds.augmented;\n    augmented: augmented_$0;\n}\nexport type augmented_$0 = augmented_$0_1 | augmented_$0_2;\nexport type augmented_$0_1 = string;\nexport type augmented_$0_2 = string;\nexport interface major {\n    kind: ASTKinds.major;\n    major: major_$0;\n}\nexport type major_$0 = major_$0_1 | major_$0_2;\nexport type major_$0_1 = string;\nexport type major_$0_2 = string;\nexport interface minor {\n    kind: ASTKinds.minor;\n    minor: minor_$0;\n}\nexport type minor_$0 = minor_$0_1 | minor_$0_2;\nexport type minor_$0_1 = string;\nexport type minor_$0_2 = string;\nexport interface sus2 {\n    kind: ASTKinds.sus2;\n    sus2: string;\n}\nexport interface sus4 {\n    kind: ASTKinds.sus4;\n    sus4: string;\n}\nexport type sus = sus_1 | sus_2;\nexport type sus_1 = sus2;\nexport type sus_2 = sus4;\nexport interface power {\n    kind: ASTKinds.power;\n    power: power_$0;\n}\nexport type power_$0 = string;\nexport interface major2 {\n    kind: ASTKinds.major2;\n    major: string;\n}\nexport type quality = quality_1 | quality_2 | quality_3 | quality_4 | quality_5 | quality_6 | quality_7;\nexport type quality_1 = diminished;\nexport type quality_2 = augmented;\nexport type quality_3 = major;\nexport type quality_4 = minor;\nexport type quality_5 = sus;\nexport type quality_6 = power;\nexport type quality_7 = major2;\nexport interface chord {\n    kind: ASTKinds.chord;\n    root: root;\n    quality: quality;\n}\nexport class Parser {\n    private readonly input: string;\n    private pos: PosInfo;\n    private negating: boolean = false;\n    private memoSafe: boolean = true;\n    constructor(input: string) {\n        this.pos = {overallPos: 0, line: 1, offset: 0};\n        this.input = input;\n    }\n    public reset(pos: PosInfo) {\n        this.pos = pos;\n    }\n    public finished(): boolean {\n        return this.pos.overallPos === this.input.length;\n    }\n    public clearMemos(): void {\n    }\n    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {\n        return this.matchchord($$dpth + 1, $$cr);\n    }\n    public matchtone($$dpth: number, $$cr?: ErrorTracker): Nullable<tone> {\n        return this.choice<tone>([\n            () => this.matchtone_1($$dpth + 1, $$cr),\n            () => this.matchtone_2($$dpth + 1, $$cr),\n            () => this.matchtone_3($$dpth + 1, $$cr),\n            () => this.matchtone_4($$dpth + 1, $$cr),\n            () => this.matchtone_5($$dpth + 1, $$cr),\n            () => this.matchtone_6($$dpth + 1, $$cr),\n            () => this.matchtone_7($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchtone_1($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_1> {\n        return this.regexAccept(String.raw`(?:C)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_2($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_2> {\n        return this.regexAccept(String.raw`(?:D)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_3($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_3> {\n        return this.regexAccept(String.raw`(?:E)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_4($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_4> {\n        return this.regexAccept(String.raw`(?:F)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_5($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_5> {\n        return this.regexAccept(String.raw`(?:G)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_6($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_6> {\n        return this.regexAccept(String.raw`(?:A)`, $$dpth + 1, $$cr);\n    }\n    public matchtone_7($$dpth: number, $$cr?: ErrorTracker): Nullable<tone_7> {\n        return this.regexAccept(String.raw`(?:B)`, $$dpth + 1, $$cr);\n    }\n    public matchnote($$dpth: number, $$cr?: ErrorTracker): Nullable<note> {\n        return this.run<note>($$dpth,\n            () => {\n                let $scope$tone: Nullable<tone>;\n                let $scope$modifier: Nullable<Nullable<note_$0>>;\n                let $$res: Nullable<note> = null;\n                if (true\n                    && ($scope$tone = this.matchtone($$dpth + 1, $$cr)) !== null\n                    && (($scope$modifier = this.matchnote_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.note, tone: $scope$tone, modifier: $scope$modifier};\n                }\n                return $$res;\n            });\n    }\n    public matchnote_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0> {\n        return this.choice<note_$0>([\n            () => this.matchnote_$0_1($$dpth + 1, $$cr),\n            () => this.matchnote_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchnote_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0_1> {\n        return this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr);\n    }\n    public matchnote_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<note_$0_2> {\n        return this.regexAccept(String.raw`(?:b)`, $$dpth + 1, $$cr);\n    }\n    public matchroot($$dpth: number, $$cr?: ErrorTracker): Nullable<root> {\n        return this.matchnote($$dpth + 1, $$cr);\n    }\n    public matchdiminished($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished> {\n        return this.run<diminished>($$dpth,\n            () => {\n                let $scope$diminished: Nullable<diminished_$0>;\n                let $$res: Nullable<diminished> = null;\n                if (true\n                    && ($scope$diminished = this.matchdiminished_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.diminished, diminished: $scope$diminished};\n                }\n                return $$res;\n            });\n    }\n    public matchdiminished_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0> {\n        return this.choice<diminished_$0>([\n            () => this.matchdiminished_$0_1($$dpth + 1, $$cr),\n            () => this.matchdiminished_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchdiminished_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0_1> {\n        return this.regexAccept(String.raw`(?:o)`, $$dpth + 1, $$cr);\n    }\n    public matchdiminished_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<diminished_$0_2> {\n        return this.regexAccept(String.raw`(?:dim)`, $$dpth + 1, $$cr);\n    }\n    public matchaugmented($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented> {\n        return this.run<augmented>($$dpth,\n            () => {\n                let $scope$augmented: Nullable<augmented_$0>;\n                let $$res: Nullable<augmented> = null;\n                if (true\n                    && ($scope$augmented = this.matchaugmented_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.augmented, augmented: $scope$augmented};\n                }\n                return $$res;\n            });\n    }\n    public matchaugmented_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0> {\n        return this.choice<augmented_$0>([\n            () => this.matchaugmented_$0_1($$dpth + 1, $$cr),\n            () => this.matchaugmented_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchaugmented_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0_1> {\n        return this.regexAccept(String.raw`(?:\\+)`, $$dpth + 1, $$cr);\n    }\n    public matchaugmented_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<augmented_$0_2> {\n        return this.regexAccept(String.raw`(?:aug)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor($$dpth: number, $$cr?: ErrorTracker): Nullable<major> {\n        return this.run<major>($$dpth,\n            () => {\n                let $scope$major: Nullable<major_$0>;\n                let $$res: Nullable<major> = null;\n                if (true\n                    && ($scope$major = this.matchmajor_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.major, major: $scope$major};\n                }\n                return $$res;\n            });\n    }\n    public matchmajor_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0> {\n        return this.choice<major_$0>([\n            () => this.matchmajor_$0_1($$dpth + 1, $$cr),\n            () => this.matchmajor_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchmajor_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0_1> {\n        return this.regexAccept(String.raw`(?:maj)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<major_$0_2> {\n        return this.regexAccept(String.raw`(?:M)`, $$dpth + 1, $$cr);\n    }\n    public matchminor($$dpth: number, $$cr?: ErrorTracker): Nullable<minor> {\n        return this.run<minor>($$dpth,\n            () => {\n                let $scope$minor: Nullable<minor_$0>;\n                let $$res: Nullable<minor> = null;\n                if (true\n                    && ($scope$minor = this.matchminor_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.minor, minor: $scope$minor};\n                }\n                return $$res;\n            });\n    }\n    public matchminor_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0> {\n        return this.choice<minor_$0>([\n            () => this.matchminor_$0_1($$dpth + 1, $$cr),\n            () => this.matchminor_$0_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchminor_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0_1> {\n        return this.regexAccept(String.raw`(?:min)`, $$dpth + 1, $$cr);\n    }\n    public matchminor_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<minor_$0_2> {\n        return this.regexAccept(String.raw`(?:m)`, $$dpth + 1, $$cr);\n    }\n    public matchsus2($$dpth: number, $$cr?: ErrorTracker): Nullable<sus2> {\n        return this.run<sus2>($$dpth,\n            () => {\n                let $scope$sus2: Nullable<string>;\n                let $$res: Nullable<sus2> = null;\n                if (true\n                    && ($scope$sus2 = this.regexAccept(String.raw`(?:sus2)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sus2, sus2: $scope$sus2};\n                }\n                return $$res;\n            });\n    }\n    public matchsus4($$dpth: number, $$cr?: ErrorTracker): Nullable<sus4> {\n        return this.run<sus4>($$dpth,\n            () => {\n                let $scope$sus4: Nullable<string>;\n                let $$res: Nullable<sus4> = null;\n                if (true\n                    && ($scope$sus4 = this.regexAccept(String.raw`(?:sus4)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sus4, sus4: $scope$sus4};\n                }\n                return $$res;\n            });\n    }\n    public matchsus($$dpth: number, $$cr?: ErrorTracker): Nullable<sus> {\n        return this.choice<sus>([\n            () => this.matchsus_1($$dpth + 1, $$cr),\n            () => this.matchsus_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchsus_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sus_1> {\n        return this.matchsus2($$dpth + 1, $$cr);\n    }\n    public matchsus_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sus_2> {\n        return this.matchsus4($$dpth + 1, $$cr);\n    }\n    public matchpower($$dpth: number, $$cr?: ErrorTracker): Nullable<power> {\n        return this.run<power>($$dpth,\n            () => {\n                let $scope$power: Nullable<power_$0>;\n                let $$res: Nullable<power> = null;\n                if (true\n                    && ($scope$power = this.matchpower_$0($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.power, power: $scope$power};\n                }\n                return $$res;\n            });\n    }\n    public matchpower_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<power_$0> {\n        return this.regexAccept(String.raw`(?:5)`, $$dpth + 1, $$cr);\n    }\n    public matchmajor2($$dpth: number, $$cr?: ErrorTracker): Nullable<major2> {\n        return this.run<major2>($$dpth,\n            () => {\n                let $scope$major: Nullable<string>;\n                let $$res: Nullable<major2> = null;\n                if (true\n                    && ($scope$major = this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.major2, major: $scope$major};\n                }\n                return $$res;\n            });\n    }\n    public matchquality($$dpth: number, $$cr?: ErrorTracker): Nullable<quality> {\n        return this.choice<quality>([\n            () => this.matchquality_1($$dpth + 1, $$cr),\n            () => this.matchquality_2($$dpth + 1, $$cr),\n            () => this.matchquality_3($$dpth + 1, $$cr),\n            () => this.matchquality_4($$dpth + 1, $$cr),\n            () => this.matchquality_5($$dpth + 1, $$cr),\n            () => this.matchquality_6($$dpth + 1, $$cr),\n            () => this.matchquality_7($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchquality_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_1> {\n        return this.matchdiminished($$dpth + 1, $$cr);\n    }\n    public matchquality_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_2> {\n        return this.matchaugmented($$dpth + 1, $$cr);\n    }\n    public matchquality_3($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_3> {\n        return this.matchmajor($$dpth + 1, $$cr);\n    }\n    public matchquality_4($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_4> {\n        return this.matchminor($$dpth + 1, $$cr);\n    }\n    public matchquality_5($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_5> {\n        return this.matchsus($$dpth + 1, $$cr);\n    }\n    public matchquality_6($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_6> {\n        return this.matchpower($$dpth + 1, $$cr);\n    }\n    public matchquality_7($$dpth: number, $$cr?: ErrorTracker): Nullable<quality_7> {\n        return this.matchmajor2($$dpth + 1, $$cr);\n    }\n    public matchchord($$dpth: number, $$cr?: ErrorTracker): Nullable<chord> {\n        return this.run<chord>($$dpth,\n            () => {\n                let $scope$root: Nullable<root>;\n                let $scope$quality: Nullable<quality>;\n                let $$res: Nullable<chord> = null;\n                if (true\n                    && ($scope$root = this.matchroot($$dpth + 1, $$cr)) !== null\n                    && ($scope$quality = this.matchquality($$dpth + 1, $$cr)) !== null\n                    && this.match$EOF($$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.chord, root: $scope$root, quality: $scope$quality};\n                }\n                return $$res;\n            });\n    }\n    public test(): boolean {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        const ans = res !== null;\n        this.reset(mrk);\n        return ans;\n    }\n    public parse(): ParseResult {\n        const mrk = this.mark();\n        const res = this.matchstart(0);\n        if (res)\n            return {ast: res, errs: []};\n        this.reset(mrk);\n        const rec = new ErrorTracker();\n        this.clearMemos();\n        this.matchstart(0, rec);\n        const err = rec.getErr()\n        return {ast: res, errs: err !== null ? [err] : []}\n    }\n    public mark(): PosInfo {\n        return this.pos;\n    }\n    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {\n        const mrk = this.mark();\n        const res: T[] = [];\n        for (;;) {\n            const t = func();\n            if (t === null) {\n                break;\n            }\n            res.push(t);\n        }\n        if (star || res.length > 0) {\n            return res;\n        }\n        this.reset(mrk);\n        return null;\n    }\n    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn()\n        if (res !== null)\n            return res;\n        this.reset(mrk);\n        return null;\n    }\n    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {\n        for (const f of fns) {\n            const res = f();\n            if (res !== null) {\n                return res;\n            }\n        }\n        return null;\n    }\n    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {\n        return this.run<string>(dpth,\n            () => {\n                const reg = new RegExp(match, \"y\");\n                const mrk = this.mark();\n                reg.lastIndex = mrk.overallPos;\n                const res = this.tryConsume(reg);\n                if(cr) {\n                    cr.record(mrk, res, {\n                        kind: \"RegexMatch\",\n                        // We substring from 3 to len - 1 to strip off the\n                        // non-capture group syntax added as a WebKit workaround\n                        literal: match.substring(3, match.length - 1),\n                        negated: this.negating,\n                    });\n                }\n                return res;\n            });\n    }\n    private tryConsume(reg: RegExp): Nullable<string> {\n        const res = reg.exec(this.input);\n        if (res) {\n            let lineJmp = 0;\n            let lind = -1;\n            for (let i = 0; i < res[0].length; ++i) {\n                if (res[0][i] === \"\\n\") {\n                    ++lineJmp;\n                    lind = i;\n                }\n            }\n            this.pos = {\n                overallPos: reg.lastIndex,\n                line: this.pos.line + lineJmp,\n                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)\n            };\n            return res[0];\n        }\n        return null;\n    }\n    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn();\n        this.reset(mrk);\n        return res;\n    }\n    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {\n        const mrk = this.mark();\n        const oneg = this.negating;\n        this.negating = !oneg;\n        const res = fn();\n        this.negating = oneg;\n        this.reset(mrk);\n        return res === null ? true : null;\n    }\n    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {\n        const $scope$pos = this.mark();\n        const $scope$memoRes = memo.get($scope$pos.overallPos);\n        if(this.memoSafe && $scope$memoRes !== undefined) {\n        this.reset($scope$memoRes[1]);\n        return $scope$memoRes[0];\n        }\n        const $scope$result = rule();\n        if(this.memoSafe)\n        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);\n        return $scope$result;\n    }\n    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {\n        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;\n        if(et)\n            et.record(this.mark(), res, { kind: \"EOF\", negated: this.negating });\n        return res;\n    }\n}\nexport function parse(s: string): ParseResult {\n    const p = new Parser(s);\n    return p.parse();\n}\nexport interface ParseResult {\n    ast: Nullable<start>;\n    errs: SyntaxErr[];\n}\nexport interface PosInfo {\n    readonly overallPos: number;\n    readonly line: number;\n    readonly offset: number;\n}\nexport interface RegexMatch {\n    readonly kind: \"RegexMatch\";\n    readonly negated: boolean;\n    readonly literal: string;\n}\nexport type EOFMatch = { kind: \"EOF\"; negated: boolean };\nexport type MatchAttempt = RegexMatch | EOFMatch;\nexport class SyntaxErr {\n    public pos: PosInfo;\n    public expmatches: MatchAttempt[];\n    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {\n        this.pos = pos;\n        this.expmatches = [...expmatches];\n    }\n    public toString(): string {\n        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === \"EOF\" ? \" EOF\" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;\n    }\n}\nclass ErrorTracker {\n    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};\n    private regexset: Set<string> = new Set();\n    private pmatches: MatchAttempt[] = [];\n    public record(pos: PosInfo, result: any, att: MatchAttempt) {\n        if ((result === null) === att.negated)\n            return;\n        if (pos.overallPos > this.mxpos.overallPos) {\n            this.mxpos = pos;\n            this.pmatches = [];\n            this.regexset.clear()\n        }\n        if (this.mxpos.overallPos === pos.overallPos) {\n            if(att.kind === \"RegexMatch\") {\n                if(!this.regexset.has(att.literal))\n                    this.pmatches.push(att);\n                this.regexset.add(att.literal);\n            } else {\n                this.pmatches.push(att);\n            }\n        }\n    }\n    public getErr(): SyntaxErr | null {\n        if (this.mxpos.overallPos !== -1)\n            return new SyntaxErr(this.mxpos, this.pmatches);\n        return null;\n    }\n}","import {\n  chord as ParsedChord,\n  parse,\n  quality as ParsedQuality,\n} from \"./parser\";\n\n// Hardcode intervals\n\nenum Interval {\n  UNISON = 0,\n  MINOR_SECOND = 1,\n  MAJOR_SECOND = 2,\n  MINOR_THIRD = 3,\n  MAJOR_THIRD = 4,\n  PERFECT_FOURTH = 5,\n  TRITONE = 6,\n  PERFECT_FIFTH = 7,\n  MINOR_SIXTH = 8,\n  MAJOR_SIXTH = 9,\n  DIMINISHED_SEVENTH = 9,\n  MINOR_SEVENTH = 10,\n  MAJOR_SEVENTH = 11,\n  OCTAVE = 12,\n  MINOR_NINTH = OCTAVE + MINOR_SECOND,\n  MAJOR_NINTH = OCTAVE + MAJOR_SECOND,\n  MINOR_TENTH = OCTAVE + MINOR_THIRD,\n  MAJOR_TENTH = OCTAVE + MAJOR_THIRD,\n  PERFECT_ELEVENTH = OCTAVE + PERFECT_FOURTH,\n  COMPOUND_TRITONE = OCTAVE + TRITONE,\n  PERFECT_TWELFTH = OCTAVE + PERFECT_FIFTH,\n  MINOR_THIRTEENTH = OCTAVE + MAJOR_SIXTH,\n  MAJOR_THIRTEENTH = OCTAVE + MAJOR_SIXTH,\n}\n\n// Helper functions\nfunction replace(ints: Interval[], remove: Interval, replacement: Interval) {\n  return ints.map((interval) => (interval === remove ? replacement : interval));\n}\nfunction remove(ints: Interval[], removals: Interval[]) {\n  return ints.filter((i) => !removals.includes(i));\n}\n\nfunction add(ints: Interval[], newInterval: Interval) {\n  if (ints.find((i) => i === newInterval)) {\n    return ints;\n  }\n  ints.push(newInterval);\n  ints.sort();\n  return ints;\n}\n\n/**\n * Modifiers\n * (Interval) modifiers are used to construct interval lists for different chord types.\n * The idea is to construct chords how you might as a human: start with the major chord\n * and then modify or extend it to create other chords. That way, give a chord with a\n * root, quality, extensions etc. we can generate the keys that correspond to that\n * chord.\n */\n\nconst MAJOR = [Interval.UNISON, Interval.MAJOR_THIRD, Interval.PERFECT_FIFTH];\n\n// Chord qualities (major, minor, augment, diminished, power) as chords\ntype Modifier = (ints: Interval[]) => Interval[];\nconst identity = (ints: Interval[]) => ints;\nconst minorThird = (ints: Interval[]) =>\n  replace(ints, Interval.MAJOR_THIRD, Interval.MINOR_THIRD);\nconst augmentedFifth = (ints: Interval[]) =>\n  replace(ints, Interval.PERFECT_FIFTH, Interval.MINOR_SIXTH);\nconst diminishedFifth = (ints: Interval[]) =>\n  replace(ints, Interval.PERFECT_FIFTH, Interval.TRITONE);\nconst minorSeventh = (ints: Interval[]) => add(ints, Interval.MINOR_SEVENTH);\nconst diminishedSeventh = (ints: Interval[]) =>\n  add(ints, Interval.DIMINISHED_SEVENTH);\nconst power = (ints: Interval[]) =>\n  remove(ints, [Interval.MAJOR_THIRD, Interval.MINOR_THIRD]);\nconst sus2 = (ints: Interval[]) => add(power(ints), Interval.MAJOR_SECOND);\nconst sus4 = (ints: Interval[]) => add(power(ints), Interval.PERFECT_FOURTH);\n\nconst MINOR = minorThird(MAJOR);\nconst AUGMENTED = augmentedFifth(MAJOR);\nconst DIMINSHED = diminishedFifth(MINOR);\nconst POWER = power(MAJOR);\n\n// Write chord added intervals (major sixth, major/minor seventh, major 9th/11th/13th)\n// Write chord extensions (b9, 9, 11, #11, b13, 13) and minor 7th modifications (M7)\n// Write chord modifications (sus2, sus4)\n\ntype Tone = \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"A\" | \"B\";\ntype Sharp = \"#\";\ntype Flat = \"b\";\ntype NoteModifier = undefined | Sharp | Flat;\ntype TNote = {\n  tone: Tone;\n  modifier: NoteModifier;\n  symbol: string;\n};\ntype Quality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  // | \"Half Diminished\"\n  | \"Power\"\n  | \"Suspended 2nd\"\n  | \"Suspended 4th\";\ntype TChord = {\n  root: Note;\n  quality: Quality;\n};\n\nexport class Note implements TNote {\n  tone: Tone;\n  modifier: NoteModifier = undefined;\n\n  constructor(tone: Tone, modifier?: NoteModifier) {\n    this.tone = tone;\n    this.modifier = modifier;\n  }\n\n  get symbol() {\n    return this.modifier ? this.tone + this.modifier : this.tone;\n  }\n}\n\nexport class Chord implements TChord {\n  root: Note;\n  quality: Quality;\n  private _intervals?: Interval[] = undefined;\n\n  constructor(root: Note, quality: Quality) {\n    this.root = root;\n    this.quality = quality;\n  }\n\n  get name(): string {\n    const { root, quality } = this;\n    const names = [root.symbol, quality];\n    return names.join(\" \");\n  }\n\n  get intervals(): Interval[] {\n    if (!this._intervals) {\n      let result = MAJOR;\n      const modifiers: Modifier[] = [this.qualityModifier()];\n      modifiers.forEach((f) => (result = f(result)));\n      this._intervals = result;\n    }\n    return this._intervals;\n  }\n\n  private qualityModifier() {\n    switch (this.quality) {\n      case \"Major\":\n        return identity;\n      case \"Minor\":\n        return minorThird;\n      case \"Augmented\":\n        return augmentedFifth;\n      case \"Diminished\":\n        return diminishedFifth;\n      // case \"Half Diminished\":\n      //   return;\n      case \"Power\":\n        return power;\n      case \"Suspended 2nd\":\n        return sus2;\n      case \"Suspended 4th\":\n        return sus4;\n      default:\n        throw `Unhandled quality case: ${this.quality}`;\n    }\n  }\n}\n\n// || Parsing\n\ntype FullParsedQuality = ParsedQuality & {\n  major?: string;\n  minor?: string;\n  augmented?: string;\n  diminished?: string;\n  half_diminished?: string;\n  power?: string;\n  sus2?: string;\n  sus4?: string;\n};\n\nfunction evaluateQuality(quality: FullParsedQuality): Quality {\n  if (quality.major || quality.major === \"\") return \"Major\";\n  if (quality.minor) return \"Minor\";\n  if (quality.augmented) return \"Augmented\";\n  if (quality.diminished) return \"Diminished\";\n  // if (quality.half_diminished) return \"Half Diminished\";\n  if (quality.power) return \"Power\";\n  if (quality.sus2) return \"Suspended 2nd\";\n  if (quality.sus4) return \"Suspended 4th\";\n  throw \"Unhandled quality:\" + JSON.stringify(quality);\n}\n\nexport function evaluate(chord: ParsedChord | null): Chord {\n  if (chord === null) throw Error(\"Parsed chord is null.\");\n  const { root: _root, quality: _quality } = chord;\n  const root = new Note(<Tone>_root.tone, <NoteModifier>_root.modifier);\n  const quality = evaluateQuality(_quality);\n  return new Chord(root, quality);\n}\n\nexport function parseToChord(chordSymbol: string): Chord | undefined {\n  const { ast, errs } = parse(chordSymbol);\n  if (ast) return evaluate(ast);\n  return undefined;\n}\n","import { computed, reaction } from \"mobx\";\nimport { parseToChord } from \"../../chords/chords\";\nimport { ChordFinderStore } from \"./ChordFinderStore\";\n\nexport class ChordFinderPresenter {\n  constructor(private store: ChordFinderStore) {\n    // Whenever the input changes, update the chord name and intervals shown\n    reaction(\n      () => this.store.display.store.chordSymbol.get(),\n      () => {\n        const chord = this.chordFromSymbol;\n        const { piano, display } = this.store;\n        if (chord) {\n          display.updateName(chord.name);\n          piano.unmarkAll();\n          piano.mark(chord);\n        } else {\n          display.updateName(\"\");\n          piano.unmarkAll();\n        }\n      }\n    );\n  }\n\n  @computed\n  get chordFromSymbol() {\n    const chordSymbol = this.store.display.store.chordSymbol.get();\n    const parsedChord = parseToChord(chordSymbol);\n    return parsedChord;\n  }\n}\n","import \"./ChordFinder.css\";\nimport { observer } from \"mobx-react\";\nimport { ChordDisplayView } from \"./ChordDisplay/ChordDisplayView\";\nimport { createChordDisplay } from \"./ChordDisplay/ChordDisplay\";\nimport { createPiano } from \"./Piano/Piano\";\nimport { ChordFinderStore } from \"./ChordFinderStore\";\nimport { ChordFinderPresenter } from \"./ChordFinderPresenter\";\n\nfunction createChordFinder() {\n  const { Piano, store: pianoStore, mark, unmarkAll } = createPiano();\n\n  const {\n    ChordDisplay,\n    store: displayStore,\n    updateSymbol,\n    updateName,\n  } = createChordDisplay();\n\n  const store = new ChordFinderStore(\n    { store: pianoStore, mark, unmarkAll },\n    {\n      store: displayStore,\n      updateSymbol,\n      updateName,\n    }\n  );\n\n  const presenter = new ChordFinderPresenter(store);\n\n  const cMajorInversionE = {\n    name: \"C Major (inversion over E)\",\n    symbol: \"C/E\",\n    notes: [\"E\", \"G\", \"C\"],\n  };\n\n  return observer(() => (\n    <div className=\"ChordFinderView\">\n      <ChordDisplay></ChordDisplay>\n      <Piano></Piano>\n    </div>\n  ));\n}\n\nexport const ChordFinder = createChordFinder();\n","import { observer } from \"mobx-react\";\nimport { ChordDisplayPresenter } from \"./ChordDisplayPresenter\";\nimport { ChordDisplayStore } from \"./ChordDisplayStore\";\nimport { ChordDisplayView } from \"./ChordDisplayView\";\n\nexport function createChordDisplay() {\n  const store = new ChordDisplayStore();\n  const presenter = new ChordDisplayPresenter(store);\n\n  const ChordDisplay = observer(() => (\n    <ChordDisplayView\n      chordName={store.chordName.get()}\n      chordSymbol={store.chordSymbol.get()}\n      // need anonymity and presenter.method here to preserve 'this' binding to presenter\n      onChangeSymbol={(symbol) => presenter.updateSymbol(symbol)}\n    ></ChordDisplayView>\n  ));\n\n  return {\n    ChordDisplay,\n    store: store,\n    // need presenter.methodName to preserve this binding\n    updateSymbol: presenter.updateSymbol,\n    updateName: presenter.updateName,\n  };\n}\n","import \"./App.css\";\nimport { ChordFinder } from \"./ui/ChordFinder/ChordFinder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>🎼 Mapiano 🎵</h1>\n      <ChordFinder />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}